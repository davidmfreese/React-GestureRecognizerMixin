{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "node_modules/JSCoreGraphics/index.js",
    "node_modules/JSCoreGraphics/src/Animations/AnimationEasingType.js",
    "node_modules/JSCoreGraphics/src/Animations/CAAnimation.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/DataTypes/Point.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/DataTypes/Rect.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/DataTypes/Size.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/DataTypes/Vector.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/Geometry.js",
    "node_modules/JSCoreGraphics/src/CoreGraphics/Geometry/GeometryConstants.js",
    "node_modules/JSCoreGraphics/src/Foundation/DataTypes/IndexPath.js",
    "node_modules/JSCoreGraphics/src/Kit/DataTypes/EdgeInsets.js",
    "node_modules/JSCoreGraphics/src/Kit/Kit.js",
    "node_modules/JSCoreGraphics/src/Kit/KitConstants.js",
    "node_modules/JSCoreGraphics/src/Kit/Views/View.js",
    "node_modules/tcomb-validation/index.js",
    "node_modules/tcomb-validation/node_modules/tcomb/index.js",
    "node_modules/tcomb/index.js",
    "node_modules/underscore/underscore.js",
    "src/GestureRecognizer/Delegates/GestureRecognizerDelegate.js",
    "src/GestureRecognizer/Enums/GestureRecognizerEnums.js",
    "src/GestureRecognizer/GestureRecognizerBase.js",
    "src/GestureRecognizer/GestureRecognizerMixin.js",
    "src/GestureRecognizer/Protocols/GestureRecognizerProtocol.js",
    "src/GestureRecognizer/Protocols/TouchProtocol.js",
    "src/GestureRecognizer/Recognizers/PanGestureRecognizer.js",
    "src/GestureRecognizer/Recognizers/TapGestureRecognizer.js",
    "src/GestureRecognizer/Touch.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfzhthglpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var exports = {\n    Delegates: {\n        GestureRecognizerDelegate: require('./src/GestureRecognizer/Delegates/GestureRecognizerDelegate')\n    },\n    Enums: require('./src/GestureRecognizer/Enums/GestureRecognizerEnums'),\n    Protocols: {\n        GestureRecognizerProtocol: require('./src/GestureRecognizer/Protocols/GestureRecognizerProtocol'),\n        TouchProtocol: require('./src/GestureRecognizer/Protocols/TouchProtocol')\n    },\n    Recognizers: {\n        PanGestureRecognizer: require('./src/GestureRecognizer/Recognizers/PanGestureRecognizer'),\n        TapGestureRecognizer: require('./src/GestureRecognizer/Recognizers/TapGestureRecognizer')\n    },\n    GestureRecognizerBase: require('./src/GestureRecognizer/GestureRecognizerBase'),\n    GestureTouch: require('./src/GestureRecognizer/Touch'),\n    GestureRecognizerMixin: require('./src/GestureRecognizer/GestureRecognizerMixin'),\n    JSCoreGraphics: require('JSCoreGraphics')\n};\n\nmodule.exports = exports;\n\n",
    "var CoreGraphics = {};\nvar Foundation = {};\nvar Animations = {};\nvar Kit = require(\"./src/Kit/Kit\");\n\nAnimations.CAAnimation = require(\"./src/Animations/CAAnimation\");\nAnimations.AnimationEasingType = require(\"./src/Animations/AnimationEasingType\");\n\nCoreGraphics.Geometry = require(\"./src/CoreGraphics/Geometry/Geometry\");\nCoreGraphics.Geometry.DataTypes = {\n    Point: require(\"./src/CoreGraphics/Geometry/DataTypes/Point\"),\n    Size: require(\"./src/CoreGraphics/Geometry/DataTypes/Size\"),\n    Rect: require(\"./src/CoreGraphics/Geometry/DataTypes/Rect\"),\n    Vector: require(\"./src/CoreGraphics/Geometry/DataTypes/Vector\")\n};\nCoreGraphics.Geometry.Constants = require(\"./src/CoreGraphics/Geometry/GeometryConstants\");\n\nFoundation.DataTypes = {\n    IndexPath: require(\"./src/Foundation/DataTypes/IndexPath\")\n};\n\nKit.DataTypes = {\n    EdgeInsets: require(\"./src/Kit/DataTypes/EdgeInsets\")\n};\nKit.KitConstants = {\n    IndexPath: require(\"./src/Kit/KitConstants\")\n};\nKit.Views = {\n    View: require(\"./src/Kit/Views/View\")\n};\n\nmodule.exports = {\n    Animations: Animations,\n    CoreGraphics: CoreGraphics,\n    Foundation: Foundation,\n    Kit: Kit\n};",
    "var AnimationEasingType = {\n    AnimationEaseLinear: 1,\n    AnimationEaseOutQuad: 2,\n    AnimationEastInOutCubic: 3\n};\n\nmodule.exports = AnimationEasingType;\n",
    "var AnimationEasingType = require(\"./AnimationEasingType\");\n\nvar global = typeof window === \"undefined\" ? {} : window;\n\n//TODO: better RAF implementation\nvar _requestAnimationFrame = function(win, t) {\n    return  win[\"r\" + t] ||\n    win[\"webkitR\" + t] ||\n    win[\"mozR\" + t] ||\n    win[\"msR\" + t] ||\n    function(fn) { return setTimeout(fn, 60) }\n}(global, \"equestAnimationFrame\");\n\nvar _cancelAnimationFrame = function(win, t) {\n    return win[\"c\" + t] ||\n    win[\"webkitC\" + t] ||\n    win[\"mozC\" + t] ||\n    win[\"msC\" + t] ||\n    undefined;\n}(global, \"ancelAnimationFrame\");\n\nif(!_cancelAnimationFrame) {\n    var _cancelAnimationFrame = function(win, t) {\n        return win[\"c\" + t] ||\n        win[\"webkitC\" + t] ||\n        win[\"mozC\" + t] ||\n        win[\"msC\" + t] ||\n        function(id) { clearTimeout(id); };\n    }(global, \"ancelRequestAnimationFrame\");\n}\n\nif (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n\nfunction getRate(t) {\n    return 1 - t;\n}\n\nfunction easelinear(t) { return t }\n\nfunction easeOutQuad(t) { return t*(2-t) }\n\nfunction easeInOutCubic(t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n\n//taken from http://www.sitepoint.com/simple-animations-using-requestanimationframe/\nfunction Animate(duration, animationEasingType, stepFunction, success) {\n    var rafId = -1;\n    this.cancelAnimation = function() {\n        if(rafId) {\n            _cancelAnimationFrame(rafId);\n            rafId = undefined;\n        }\n        success(\"cancelled\");\n\n    };\n    this.finishAnimation = function() {\n        if(rafId) {\n            _cancelAnimationFrame(rafId);\n            rafId = undefined;\n        }\n        stepFunction(1);\n        success(\"success\");\n\n    };\n\n    var end = Date.now() + duration;\n    var step = function() {\n        var current = Date.now();\n        var remaining = end - current;\n        var tScaled = remaining/duration;\n\n        if(rafId === undefined) {\n            return;\n        }\n        else if(remaining < 16) {\n            stepFunction(1);\n            success(\"success\");\n            return;\n        }\n        else {\n            var rate = 0;\n            var t = 0;\n            if(!animationEasingType || animationEasingType === AnimationEasingType.AnimationEaseLinear) {\n                var t = easelinear(tScaled);\n                rate = getRate(t);\n            } else if(animationEasingType === AnimationEasingType.AnimationEaseOutQuad) {\n                var t = easeOutQuad(tScaled);\n                rate = getRate(t);\n            } else if(animationEasingType === AnimationEasingType.AnimationEastInOutCubic) {\n                var t = easeInOutCubic(tScaled);\n                rate = getRate(t);\n            }\n            stepFunction(rate);\n        }\n\n        rafId = _requestAnimationFrame(step);\n    };\n    step();\n\n    return this;\n}\n\nmodule.exports = Animate;\n\n\n\n",
    "var t = require(\"tcomb-validation\");\n\nvar Point = t.struct({\n    x: t.Num,\n    y: t.Num\n}, \"Point\");\n\nmodule.exports = Point;",
    "var t = require(\"tcomb-validation\");\nvar Size = require(\"./Size\");\nvar Point = require(\"./Point\");\n\nvar Rect = t.struct({\n    origin: Point,\n    size: Size\n}, \"Frame\");\n\nmodule.exports = Rect;\n",
    "var t = require(\"tcomb-validation\");\n\nvar Size = t.struct({\n    height: t.Num,\n    width: t.Num\n}, \"Size\", true);\n\n//var SizeFuncs = t.struct({\n//    isSizeZero: t.func(Size, t.Bool)\n//});\n//\n//Size = Size.extend(SizeFuncs);\n//\n//Size.prototype.isSizeZero = function(size) {\n//    return size.height = 0 && size.width == 0;\n//}\n\nmodule.exports = Size;\n",
    "var t = require(\"tcomb-validation\");\n\nvar Vector = t.struct({\n    dx: t.Num,\n    dy: t.Num\n}, \"Vector\");\n\nmodule.exports = Vector;",
    "var t = require(\"tcomb-validation\");\n\nvar Point = require(\"./DataTypes/Point\");\nvar Size = require(\"./DataTypes/Size\");\nvar Rect = require(\"./DataTypes/Rect\");\nvar Vector = require(\"./DataTypes/Vector\");\nvar Constants = require(\"./GeometryConstants\");\n\nvar Geometry = {};\n\nGeometry.shouldValidate = false;\n\nGeometry.pointMake = function(x, y) {\n    if(this.shouldValidate) { t.validate(x, t.Num); t.validate(y, t.Num);}\n    return new Point({\n        x: x,\n        y: y\n    });\n};\nGeometry.sizeMake = function(width, height) {\n    if(this.shouldValidate) { t.validate(width, t.Num); t.validate(height, t.Num); }\n    return new Size({\n        width: width,\n        height: height\n    });\n};\nGeometry.rectMake = function(x, y, width, height) {\n    return new Rect({\n        origin: this.pointMake(x, y),\n        size: this.sizeMake(width, height)\n    });\n};\n\nGeometry.pointEqualToPoint = function(point1, point2) {\n    if(this.shouldValidate) { Point.is(point1); Point.is(point2); }\n    return point1.x == point2.x && point1.y == point2.y;\n};\nGeometry.sizeEqualToSize = function(size1, size2) {\n    if(this.shouldValidate) { Size.is(size1); Size.is(size2); }\n    return size1.width == size2.width && size1.height == size2.height;\n};\nGeometry.rectEqualToRect = function(rect1, rect2) {\n    if(this.shouldValidate) { Rect.is(rect1); Rect.is(rect1); }\n    return this.pointEqualToPoint(rect1.origin, rect2.origin) && this.sizeEqualToSize(rect1.size, rect2.size);\n};\n\nGeometry.rectGetMinX = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return rect.origin.x;\n};\nGeometry.rectGetMaxX = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return rect.origin.x + rect.size.width;\n};\nGeometry.rectGetMinY = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return rect.origin.y;\n};\nGeometry.rectGetMaxY = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return rect.origin.y + rect.size.height;\n};\nGeometry.rectGetMidX = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return this.rectGetMinX(rect) + rect.size.width/2;\n};\nGeometry.rectGetMidY = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return this.rectGetMinY(rect) + rect.size.height/2;\n};\n\nGeometry.rectContainsPoint = function(rect, point) {\n    if(this.shouldValidate) { Rect.is(rect); Point.is(point); }\n    var minX = this.rectGetMinX(rect);\n    var maxX = this.rectGetMaxX(rect);\n    var minY = this.rectGetMinY(rect);\n    var maxY = this.rectGetMaxY(rect);\n\n    return !(point.x < minX || point.x > maxX || point.y < minY || point.y > maxY);\n};\nGeometry.rectContainsRect = function(rect, possibleInnerRect) {\n    if(this.shouldValidate) { Rect.is(rect); Rect.is(possibleInnerRect); }\n    var upperLeftPoint = possibleInnerRect.origin;\n    var lowerLeftPoint = new Point({\n        x: this.rectGetMaxX(possibleInnerRect),\n        y: this.rectGetMaxY(possibleInnerRect)\n    });\n\n    return this.rectContainsPoint(rect, upperLeftPoint) && this.rectContainsPoint(rect, lowerLeftPoint);\n};\n\nGeometry.isPointZero = function(point) {\n    if(this.shouldValidate) { Point.is(point); }\n    return this.pointEqualToPoint(point, Constants.pointZero);\n};\nGeometry.isSizeZero = function(size) {\n    if(this.shouldValidate) { Size.is(size); }\n    return this.sizeEqualToSize(size, Constants.sizeZero);\n};\nGeometry.isRectZero = function(rect) {\n    if(this.shouldValidate) { Rect.is(rect); }\n    return this.rectEqualToRect(rect, Constants.rectZero);\n};\n\n//TODO: Should this include Contains?\nGeometry.rectIntersectsRect = function(rect1, rect2) {\n    var intersects =\n        !(\n            rect1.origin.x + rect1.size.width < rect2.origin.x\n            || rect2.origin.x + rect2.size.width < rect1.origin.x\n            || rect1.origin.y + rect1.size.height < rect2.origin.y\n            || rect2.origin.y + rect2.size.height < rect1.origin.y\n        );\n\n    return intersects || this.rectContainsRect(rect2, rect1);\n};\n\nmodule.exports = Geometry;",
    "var Point = require(\"./DataTypes/Point\");\nvar Size = require(\"./DataTypes/Size\");\nvar Rect = require(\"./DataTypes/Rect\");\n\nvar POINT_ZERO = new Point({x: 0, y: 0});\nvar SIZE_ZERO = new Size({height:0, width:0});\nvar RECT_ZERO = new Rect({\n    origin: POINT_ZERO,\n    size: SIZE_ZERO\n});\n\nvar GeometryConstants = {};\n\nGeometryConstants.pointZero = POINT_ZERO;\n\nGeometryConstants.sizeZero = SIZE_ZERO;\n\nGeometryConstants.rectZero = RECT_ZERO;\n\nmodule.exports = GeometryConstants;",
    "var t = require(\"tcomb-validation\");\n\nvar IndexPath = t.struct({\n    row: t.Num,\n    section: t.maybe(t.Num)\n}, \"IndexPath\");\n\nmodule.exports = IndexPath;\n\n",
    "var t = require(\"tcomb-validation\");\n\nvar EdgeInsets = t.struct({\n    top: t.Num,\n    left: t.Num,\n    bottom: t.Num,\n    right: t.Num\n}, \"EdgeInsets\");\n\nmodule.exports = EdgeInsets;\n\n",
    "var EdgeInsets = require(\"./DataTypes/EdgeInsets\");\nvar Constants = require(\"./KitConstants\");\nvar Kit = {};\n\nKit.edgeInsetsZero = Constants.INSETS_ZERO;\n\nKit.edgeInsetsMake = function(left, top, right, bottom) {\n    return new EdgeInsets({\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n    });\n};\n\nmodule.exports = Kit;",
    "var EdgeInsets = require(\"./DataTypes/EdgeInsets\");\n\nvar INSETS_ZERO = new EdgeInsets({top: 0, bottom: 0, left: 0, right: 0});\n\nvar KitConstants = {};\nKitConstants.INSETS_ZERO = INSETS_ZERO;\n\nmodule.exports = KitConstants;\n\n",
    "var t = require(\"tcomb-validation\");\n\nvar Rect = require(\"../../CoreGraphics/Geometry/DataTypes/Rect\");\nvar Point = require(\"../../CoreGraphics/Geometry/DataTypes/Point\");\nvar CAAnimation = require(\"../../Animations/CAAnimation\");\nvar AnimationEasingType = require(\"../../Animations/AnimationEasingType\");\n\nvar AnimatableStyleProps = {\n    top: 1,\n    left: 2,\n    bottom: 3,\n    right: 4,\n    opacity: 5\n};\n\nfunction AnimatableProp(propertyName, startValue, endValue, appendValue, duration) {\n    this.propertyName = propertyName;\n    this.startValue = startValue;\n    this.endValue = endValue;\n    this.duration = duration;\n    this.currentValue = startValue;\n    this.appendValue = appendValue;\n}\n\nvar View = t.struct({\n    frame: Rect,\n    alpha: t.Num,\n    scrollPosition: Point,\n    domElement: t.Obj //no way to check this is really a dom element?\n}, \"View\");\n\nView.prototype.animateWithDurationAndOptions = function(duration, delay, animationEasingType, animations, completion) {\n    var easingType = AnimationEasingType.AnimationEaseLinear;\n    for(var animationEasingTypeKey in AnimationEasingType) {\n        var value = AnimationEasingType[animationEasingTypeKey];\n        if(animationEasingType === value ) {\n            easingType = value;\n        }\n    }\n    if (animationEasingType && AnimationEasingType[animationEasingType] > 0) {\n        easingType = AnimationEasingType[animationEasingType];\n    }\n\n    var animatableProps = [];\n    if (animations[\"frame\"] != null) {\n        if (animations[\"frame\"].origin.x != this.frame.origin.x) {\n            animatableProps.push(new AnimatableProp(\"left\", this.frame.origin.x, animations[\"frame\"].origin.x, \"px\", duration));\n        }\n        if (animations[\"frame\"].origin.y != this.frame.origin.y) {\n            animatableProps.push(new AnimatableProp(\"top\", this.frame.origin.y, animations[\"frame\"].origin.y, \"px\", duration));\n        }\n\n        if (animations[\"frame\"].size.width != this.frame.size.width) {\n            animatableProps.push(new AnimatableProp(\"right\", this.frame.origin.x + this.frame.size.width, animations[\"frame\"].origin.x + animations[\"frame\"].size.width, \"px\", duration));\n        }\n        if (animations[\"frame\"].size.height != this.frame.size.height) {\n            animatableProps.push(new AnimatableProp(\"bottom\", this.frame.origin.y + this.frame.size.height, animations[\"frame\"].origin.y + animations[\"frame\"].size.height, \"px\", duration));\n        }\n    }\n\n    if (animations[\"alpha\"] != null) {\n        if (animations[\"alpha\"] != this.alpha) {\n            animatableProps.push(new AnimatableProp(\"opacity\", this.alpha, animations[\"alpha\"], \"\", duration));\n        }\n    }\n\n    if (animations[\"scrollPosition\"] != null) {\n        var newScrollPosition = animations[\"scrollPosition\"];\n        if (newScrollPosition != null && newScrollPosition.x != this.scrollPosition.x) {\n            animatableProps.push(new AnimatableProp(\"scrollLeft\", this.scrollLeft, newScrollPosition.x, duration));\n        }\n\n        if (newScrollPosition != null && newScrollPosition.y != this.scrollPosition.y) {\n            animatableProps.push(new AnimatableProp(\"scrollTop\", this.scrollPosition.y, newScrollPosition.y, duration));\n        }\n    }\n\n    var that = this;\n    setTimeout(function () {\n        var stepFunctions = [];\n        for (var i = 0; i < animatableProps.length; i++) {\n            var stepFunction = (function(animatable) {\n                return function (rate) {\n                    if(AnimatableStyleProps[animatable.propertyName] > 0) {\n                        that.domElement.style[animatable.propertyName] = animatable.startValue - rate * (animatable.startValue - animatable.endValue) + animatable.appendValue;\n                    }\n                    else {\n                        that.domElement[animatable.propertyName] = animatable.startValue - rate * (animatable.startValue - animatable.endValue) + animatable.appendValue;\n                    }\n                }\n            })(animatableProps[i]);\n\n            stepFunctions.push(stepFunction);\n        }\n\n        var combinedStepFunction = function (rate) {\n            for (var i = 0; i < stepFunctions.length; i++) {\n                stepFunctions[i](rate);\n            }\n        };\n\n        that.currentAnimation = new CAAnimation(duration, easingType, combinedStepFunction,\n            function(success) {\n                that.currentAnimation = undefined;\n                completion(success);\n            }\n        );\n    }, delay);\n};\n\nView.prototype.cancelCurrentAnimation = function() {\n    if(this.currentAnimation != null) {\n        this.currentAnimation.cancelAnimation();\n    }\n};\n\nView.prototype.finishCurrentAnimation = function() {\n    if(this.currentAnimation != null) {\n        this.currentAnimation.finishAnimation();\n    }\n};\n\nmodule.exports = View;\n",
    "(function (root, factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    define(['tcomb'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('tcomb'));\n  } else {\n    root.t = factory(root.t);\n  }\n}(this, function (t) {\n\n  'use strict';\n\n  var Any = t.Any;\n  var Obj = t.Obj;\n  var Str = t.Str;\n  var Arr = t.Arr;\n  var struct = t.struct;\n  var list = t.list;\n  var format = t.util.format;\n\n  //\n  // domain model\n  //\n\n  var ValidationError = struct({\n    message: Str,\n    actual: Any,\n    expected: t.Type,\n    path: list(t.union([Str, t.Num]))\n  }, 'ValidationError');\n\n  function getDefaultMessage(actual, expected, path) {\n    return format('%s is `%j` should be a `%s`', '/' + path.join('/'), actual, expected.meta.name);\n  }\n\n  ValidationError.of = function of(actual, expected, path) {\n    return new ValidationError({\n      message: getDefaultMessage(actual, expected, path),\n      actual: actual,\n      expected: expected,\n      path: path\n    });\n  };\n\n  var ValidationResult = struct({\n    errors: list(ValidationError),\n    value: Any\n  }, 'ValidationResult');\n\n  ValidationResult.prototype.isValid = function isValid() {\n    return !(this.errors.length);\n  };\n\n  ValidationResult.prototype.firstError = function firstError() {\n    return this.isValid() ? null : this.errors[0];\n  };\n\n  ValidationResult.prototype.toString = function toString() {\n    return this.isValid() ?\n      format('[ValidationResult, true, %j]', this.value) :\n      format('[ValidationResult, false, (%s)]', this.errors.map(function errorToString(err) {\n        return err.message;\n      }).join(', '));\n  };\n\n  //\n  // validate\n  //\n\n  function validate(x, type) {\n    return new ValidationResult(recurse(x, type, []));\n  }\n\n  function recurse(x, type, path) {\n    var kind = t.util.getKind(type);\n    return validators[kind](x, type, path);\n  }\n\n  var validators = validate.validators = {};\n\n  // irreducibles and enums\n  validators.irreducible =\n  validators.enums = function validateIrreducible(x, type, path) {\n    return {\n      value: x,\n      errors: type.is(x) ? [] : [ValidationError.of(x, type, path)]\n    };\n  };\n\n  validators.list = function validateList(x, type, path) {\n\n    // x should be an array\n    if (!Arr.is(x)) {\n      return {value: x, errors: [ValidationError.of(x, type, path)]};\n    }\n\n    var ret = {value: [], errors: []};\n    // every item should be of type `type.meta.type`\n    for (var i = 0, len = x.length ; i < len ; i++ ) {\n      var item = recurse(x[i], type.meta.type, path.concat(i));\n      ret.value[i] = item.value;\n      ret.errors = ret.errors.concat(item.errors);\n    }\n    return ret;\n  };\n\n  validators.subtype = function validateSubtype(x, type, path) {\n\n    // x should be a valid inner type\n    var ret = recurse(x, type.meta.type, path);\n    if (ret.errors.length) {\n      return ret;\n    }\n\n    // x should satisfy the predicate\n    if (!type.meta.predicate(ret.value)) {\n      ret.errors = [ValidationError.of(x, type, path)];\n    }\n\n    return ret;\n\n  };\n\n  validators.maybe = function validateMaybe(x, type, path) {\n    return t.Nil.is(x) ?\n      {value: null, errors: []} :\n      recurse(x, type.meta.type, path);\n  };\n\n  validators.struct = function validateStruct(x, type, path) {\n\n    // x should be an object\n    if (!Obj.is(x)) {\n      return {value: x, errors: [ValidationError.of(x, type, path)]};\n    }\n\n    // [optimization]\n    if (type.is(x)) {\n      return {value: x, errors: []};\n    }\n\n    var ret = {value: {}, errors: []};\n    var props = type.meta.props;\n    // every item should be of type `props[name]`\n    for (var name in props) {\n      if (props.hasOwnProperty(name)) {\n        var prop = recurse(x[name], props[name], path.concat(name));\n        ret.value[name] = prop.value;\n        ret.errors = ret.errors.concat(prop.errors);\n      }\n    }\n    if (!ret.errors.length) {\n      ret.value = new type(ret.value);\n    }\n    return ret;\n  };\n\n  validators.tuple = function validateTuple(x, type, path) {\n\n    var types = type.meta.types;\n    var len = types.length;\n\n    // x should be an array of at most `len` items\n    if (!Arr.is(x) || x.length > len) {\n      return {value: x, errors: [ValidationError.of(x, type, path)]};\n    }\n\n    var ret = {value: [], errors: []};\n    // every item should be of type `types[i]`\n    for (var i = 0 ; i < len ; i++ ) {\n      var item = recurse(x[i], types[i], path.concat(i));\n      ret.value[i] = item.value;\n      ret.errors = ret.errors.concat(item.errors);\n    }\n    return ret;\n  };\n\n  validators.dict = function validateDict(x, type, path) {\n\n    // x should be an object\n    if (!Obj.is(x)) {\n      return {value: x, errors: [ValidationError.of(x, type, path)]};\n    }\n\n    var ret = {value: {}, errors: []};\n    // every key should be of type `domain`\n    // every value should be of type `codomain`\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        path = path.concat(k);\n        var key = recurse(k, type.meta.domain, path);\n        var item = recurse(x[k], type.meta.codomain, path);\n        ret.value[k] = item.value;\n        ret.errors = ret.errors.concat(key.errors, item.errors);\n      }\n    }\n    return ret;\n  };\n\n  validators.union = function validateUnion(x, type, path) {\n    var ctor = type.dispatch(x);\n    return t.Func.is(ctor)?\n      recurse(x, ctor, path.concat(type.meta.types.indexOf(ctor))) :\n      {value: x, errors: [ValidationError.of(x, type, path)]};\n  };\n\n  // exports\n  t.util.mixin(t, {\n    ValidationError: ValidationError,\n    ValidationResult: ValidationResult,\n    validate: validate\n  });\n\n  return t;\n\n}));\n",
    "(function (root, factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.t = factory();\n  }\n}(this, function () {\n\n  'use strict';\n\n  var failed = false;\n\n  function onFail(message) {\n    // start debugger only once\n    if (!failed) {\n      /*\n        DEBUG HINT:\n        if you are reading this, chances are that there is a bug in your system\n        see the Call Stack to find out what's wrong..\n      */\n      /*jshint debug: true*/\n      debugger;\n    }\n    failed = true;\n    throw new Error(message);\n  }\n\n  var options = {\n    onFail: onFail\n  };\n\n  function fail(message) {\n    /*\n      DEBUG HINT:\n      if you are reading this, chances are that there is a bug in your system\n      see the Call Stack to find out what's wrong..\n    */\n    options.onFail(message);\n  }\n\n  function assert(guard) {\n    if (guard !== true) {\n      var args = slice.call(arguments, 1);\n      var message = args[0] ? format.apply(null, args) : 'assert failed';\n      /*\n        DEBUG HINT:\n        if you are reading this, chances are that there is a bug in your system\n        see the Call Stack to find out what's wrong..\n      */\n      fail(message);\n    }\n  }\n\n  //\n  // utils\n  //\n\n  var slice = Array.prototype.slice;\n\n  function mixin(target, source, overwrite) {\n    if (Nil.is(source)) {\n      return target;\n    }\n    for (var k in source) {\n      if (source.hasOwnProperty(k)) {\n        if (overwrite !== true) {\n          assert(!target.hasOwnProperty(k), 'Cannot overwrite property %s', k);\n        }\n        target[k] = source[k];\n      }\n    }\n    return target;\n  }\n\n  function format() {\n    var args = slice.call(arguments);\n    var len = args.length;\n    var i = 1;\n    var message = args[0];\n\n    function formatArgument(match, type) {\n      if (match === '%%') { return '%'; }       // handle escaping %\n      if (i >= len) { return match; }           // handle less arguments than placeholders\n      var formatter = format.formatters[type];\n      if (!formatter) { return match; }         // handle undefined formatters\n      return formatter(args[i++]);\n    }\n\n    var str = message.replace(/%([a-z%])/g, formatArgument);\n    if (i < len) {\n      str += ' ' + args.slice(i).join(' ');     // handle more arguments than placeholders\n    }\n    return str;\n  }\n\n  function replacer(key, value) {\n    if (typeof value === 'function') {\n      return format('Func', value.name);\n    }\n    return value;\n  }\n\n  format.formatters = {\n    s: function formatString(x) { return String(x); },\n    j: function formatJSON(x) {\n      try {\n        return JSON.stringify(x, replacer);\n      } catch (e) {\n        return String(x);\n      }\n    }\n  };\n\n  function getName(type) {\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `getName()`', type);\n    return type.meta.name;\n  }\n\n  function getFunctionName(f) {\n    assert(typeof f === 'function', 'Invalid argument `f` = `%s` supplied to `getFunctionName()`', f);\n    return f.displayName || f.name || format('<function%s>', f.length);\n  }\n\n  function getKind(type) {\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `geKind()`', type);\n    return type.meta.kind;\n  }\n\n  function blockNew(x, type) {\n    assert(!(x instanceof type), 'Operator `new` is forbidden for type `%s`', getName(type));\n  }\n\n  function shallowCopy(x) {\n    return Arr.is(x) ? x.concat() : Obj.is(x) ? mixin({}, x) : x;\n  }\n\n  function update(instance, spec) {\n    assert(Obj.is(spec));\n    var value = shallowCopy(instance);\n    for (var k in spec) {\n      if (spec.hasOwnProperty(k)) {\n        if (update.commands.hasOwnProperty(k)) {\n          assert(Object.keys(spec).length === 1);\n          return update.commands[k](spec[k], value);\n        } else {\n          value[k] = update(value[k], spec[k]);\n        }\n      }\n    }\n    return value;\n  }\n\n  update.commands = {\n    '$apply': function $apply(f, value) {\n      assert(Func.is(f));\n      return f(value);\n    },\n    '$push': function $push(elements, arr) {\n      assert(Arr.is(elements));\n      assert(Arr.is(arr));\n      return arr.concat(elements);\n    },\n    '$remove': function $remove(keys, obj) {\n      assert(Arr.is(keys));\n      assert(Obj.is(obj));\n      for (var i = 0, len = keys.length ; i < len ; i++ ) {\n        delete obj[keys[i]];\n      }\n      return obj;\n    },\n    '$set': function $set(value) {\n      return value;\n    },\n    '$splice': function $splice(splices, arr) {\n      assert(list(Arr).is(splices));\n      assert(Arr.is(arr));\n      return splices.reduce(function reducer(acc, splice) {\n        acc.splice.apply(acc, splice);\n        return acc;\n      }, arr);\n    },\n    '$swap': function $swap(config, arr) {\n      assert(Obj.is(config));\n      assert(Num.is(config.from));\n      assert(Num.is(config.to));\n      assert(Arr.is(arr));\n      var element = arr[config.to];\n      arr[config.to] = arr[config.from];\n      arr[config.from] = element;\n      return arr;\n    },\n    '$unshift': function $unshift(elements, arr) {\n      assert(Arr.is(elements));\n      assert(Arr.is(arr));\n      return elements.concat(arr);\n    },\n    '$merge': function (obj, value) {\n      return mixin(mixin({}, value), obj, true);\n    }\n  };\n\n  //\n  // irreducibles\n  //\n\n  function irreducible(name, is) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a string\n    assert(typeof name === 'string', 'Invalid argument `name` = `%s` supplied to `irreducible()`', name);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a function\n    assert(typeof is === 'function', 'Invalid argument `is` = `%s` supplied to `irreducible()`', is);\n\n    function Irreducible(value) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n      blockNew(this, Irreducible);\n\n      // DEBUG HINT: if the debugger stops here, the first argument is invalid\n      // mouse over the `value` variable to see what's wrong. In `name` there is the name of the type\n      assert(is(value), 'Invalid argument `value` = `%s` supplied to irreducible type `%s`', value, name);\n\n      return value;\n    }\n\n    Irreducible.meta = {\n      kind: 'irreducible',\n      name: name\n    };\n\n    Irreducible.displayName = name;\n\n    Irreducible.is = is;\n\n    return Irreducible;\n  }\n\n  var Any = irreducible('Any', function isAny() {\n    return true;\n  });\n\n  var Nil = irreducible('Nil', function isNil(x) {\n    return x === null || x === void 0;\n  });\n\n  var Str = irreducible('Str', function isStr(x) {\n    return typeof x === 'string';\n  });\n\n  var Num = irreducible('Num', function isNum(x) {\n    return typeof x === 'number' && isFinite(x) && !isNaN(x);\n  });\n\n  var Bool = irreducible('Bool', function isBool(x) {\n    return x === true || x === false;\n  });\n\n  var Arr = irreducible('Arr', function isArr(x) {\n    return x instanceof Array;\n  });\n\n  var Obj = irreducible('Obj', function isObj(x) {\n    return !Nil.is(x) && typeof x === 'object' && !Arr.is(x);\n  });\n\n  var Func = irreducible('Func', function isFunc(x) {\n    return typeof x === 'function';\n  });\n\n  var Err = irreducible('Err', function isErr(x) {\n    return x instanceof Error;\n  });\n\n  var Re = irreducible('Re', function isRe(x) {\n    return x instanceof RegExp;\n  });\n\n  var Dat = irreducible('Dat', function isDat(x) {\n    return x instanceof Date;\n  });\n\n  var Type = irreducible('Type', function isType(x) {\n    return Func.is(x) && Obj.is(x.meta);\n  });\n\n  function struct(props, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a dict of types\n    // mouse over the `props` variable to see what's wrong\n    assert(dict(Str, Type).is(props), 'Invalid argument `props` = `%s` supplied to `struct` combinator', props);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `struct` combinator', name);\n\n    // DEBUG HINT: always give a name to a type, the debug will be easier\n    name = name || format('{%s}', Object.keys(props).map(function (prop) {\n      return format('%s: %s', prop, getName(props[prop]));\n    }).join(', '));\n\n    function Struct(value, mut) {\n\n      // makes Struct idempotent\n      if (Struct.is(value)) {\n        return value;\n      }\n\n      // DEBUG HINT: if the debugger stops here, the first argument is invalid\n      // mouse over the `value` variable to see what's wrong. In `name` there is the name of the type\n      assert(Obj.is(value), 'Invalid argument `value` = `%s` supplied to struct type `%s`', value, name);\n\n      // makes `new` optional\n      if (!(this instanceof Struct)) {\n        return new Struct(value, mut);\n      }\n\n      for (var k in props) {\n        if (props.hasOwnProperty(k)) {\n          var expected = props[k];\n          var actual = value[k];\n          // DEBUG HINT: if the debugger stops here, the `actual` value supplied to the `expected` type is invalid\n          // mouse over the `actual` and `expected` variables to see what's wrong\n          this[k] = expected(actual, mut);\n        }\n      }\n\n      if (mut !== true) {\n        Object.freeze(this);\n      }\n    }\n\n    Struct.meta = {\n      kind: 'struct',\n      props: props,\n      name: name\n    };\n\n    Struct.displayName = name;\n\n    Struct.is = function isStruct(x) {\n      return x instanceof Struct;\n    };\n\n    Struct.update = function updateStruct(instance, spec, value) {\n      return new Struct(update(instance, spec, value));\n    };\n\n    Struct.extend = function extendStruct(arr, name) {\n      arr = [].concat(arr).map(function (x) {\n        return Obj.is(x) ? x : x.meta.props;\n      });\n      arr.unshift(props);\n      var ret = struct(arr.reduce(mixin, {}), name);\n      mixin(ret.prototype, Struct.prototype); // prototypal inheritance\n      return ret;\n    };\n\n    return Struct;\n  }\n\n  function union(types, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a list of types\n    assert(list(Type).is(types), 'Invalid argument `types` = `%s` supplied to `union` combinator', types);\n\n    var len = types.length;\n    var defaultName = types.map(getName).join(' | ');\n\n    // DEBUG HINT: if the debugger stops here, there are too few types (they must be at least two)\n    assert(len >= 2, 'Invalid argument `types` = `%s` supplied to `union` combinator, provide at least two types', defaultName);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `union` combinator', name);\n\n    name = name || defaultName;\n\n    function Union(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n      blockNew(this, Union);\n\n      // DEBUG HINT: if the debugger stops here, you must implement the `dispatch` static method for this type\n      assert(Func.is(Union.dispatch), 'Unimplemented `dispatch()` function for union type `%s`', name);\n\n      var type = Union.dispatch(value);\n\n      // DEBUG HINT: if the debugger stops here, the `dispatch` static method returns no type\n      assert(Type.is(type), 'The `dispatch()` function of union type `%s` returns no type constructor', name);\n\n      // DEBUG HINT: if the debugger stops here, `value` can't be converted to `type`\n      // mouse over the `value` and `type` variables to see what's wrong\n      return type(value, mut);\n    }\n\n    Union.meta = {\n      kind: 'union',\n      types: types,\n      name: name\n    };\n\n    Union.displayName = name;\n\n    Union.is = function isUnion(x) {\n      return types.some(function isType(type) {\n        return type.is(x);\n      });\n    };\n\n    // default dispatch implementation\n    Union.dispatch = function dispatch(x) {\n      for (var i = 0, len = types.length ; i < len ; i++ ) {\n        if (types[i].is(x)) {\n          return types[i];\n        }\n      }\n    };\n\n    return Union;\n  }\n\n  function maybe(type, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a type\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `maybe` combinator', type);\n\n    // makes the combinator idempotent and handle Any, Nil\n    if (getKind(type) === 'maybe' || type === Any || type === Nil) {\n      return type;\n    }\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(Nil.is(name) || Str.is(name), 'Invalid argument `name` = `%s` supplied to `maybe` combinator', name);\n\n    name = name || ('?' + getName(type));\n\n    function Maybe(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n      blockNew(this, Maybe);\n\n      // DEBUG HINT: if the debugger stops here, `value` can't be converted to `type`\n      // mouse over the `value` and `type` variables to see what's wrong\n      return Nil.is(value) ? null : type(value, mut);\n    }\n\n    Maybe.meta = {\n      kind: 'maybe',\n      type: type,\n      name: name\n    };\n\n    Maybe.displayName = name;\n\n    Maybe.is = function isMaybe(x) {\n      return Nil.is(x) || type.is(x);\n    };\n\n    return Maybe;\n  }\n\n  function enums(map, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a hash\n    // mouse over the `map` variable to see what's wrong\n    assert(Obj.is(map), 'Invalid argument `map` = `%s` supplied to `enums` combinator', map);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `enums` combinator', name);\n\n    // cache enums\n    var keys = Object.keys(map);\n\n    name = name || keys.map(function (k) { return JSON.stringify(k); }).join(' | ');\n\n    function Enums(value) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n      blockNew(this, Enums);\n\n      // DEBUG HINT: if the debugger stops here, the value is not one of the defined enums\n      // mouse over the `value`, `name` and `keys` variables to see what's wrong\n      assert(Enums.is(value), 'Invalid argument `value` = `%s` supplied to enums type `%s`, expected one of %j', value, name, keys);\n\n      return value;\n    }\n\n    Enums.meta = {\n      kind: 'enums',\n      map: map,\n      name: name\n    };\n\n    Enums.displayName = name;\n\n    Enums.is = function isEnums(x) {\n      return Str.is(x) && map.hasOwnProperty(x);\n    };\n\n    return Enums;\n  }\n\n  enums.of = function enumsOf(keys, name) {\n    keys = Str.is(keys) ? keys.split(' ') : keys;\n    var value = {};\n    keys.forEach(function setEnum(k) {\n      value[k] = k;\n    });\n    return enums(value, name);\n  };\n\n  function tuple(types, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a list of types\n    assert(list(Type).is(types), 'Invalid argument `types` = `%s` supplied to `tuple` combinator', types);\n\n    var len = types.length;\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `tuple` combinator', name);\n\n    name = name || format('[%s]', types.map(getName).join(', '));\n\n    function Tuple(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, the value is not one of the defined enums\n      // mouse over the `value`, `name` and `len` variables to see what's wrong\n      assert(Arr.is(value) && value.length === len, 'Invalid argument `value` = `%s` supplied to tuple type `%s`, expected an `Arr` of length `%s`', value, name, len);\n\n      var frozen = (mut !== true);\n\n      // makes Tuple idempotent\n      if (Tuple.isTuple(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n\n      var arr = [];\n      for (var i = 0 ; i < len ; i++) {\n        var expected = types[i];\n        var actual = value[i];\n        // DEBUG HINT: if the debugger stops here, the `actual` value supplied to the `expected` type is invalid\n        // mouse over the `actual` and `expected` variables to see what's wrong\n        arr.push(expected(actual, mut));\n      }\n\n      if (frozen) {\n        Object.freeze(arr);\n      }\n      return arr;\n    }\n\n    Tuple.meta = {\n      kind: 'tuple',\n      types: types,\n      length: len,\n      name: name\n    };\n\n    Tuple.displayName = name;\n\n    Tuple.isTuple = function isTuple(x) {\n      return types.every(function isType(type, i) {\n        return type.is(x[i]);\n      });\n    };\n\n    Tuple.is = function isTuple(x) {\n      return Arr.is(x) && x.length === len && Tuple.isTuple(x);\n    };\n\n    Tuple.update = function updateTuple(instance, spec, value) {\n      return Tuple(update(instance, spec, value));\n    };\n\n    return Tuple;\n  }\n\n  function subtype(type, predicate, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a type\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `subtype` combinator', type);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a function\n    assert(Func.is(predicate), 'Invalid argument `predicate` = `%s` supplied to `subtype` combinator', predicate);\n\n    // DEBUG HINT: if the debugger stops here, the third argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `subtype` combinator', name);\n\n    // DEBUG HINT: always give a name to a type, the debug will be easier\n    name = name || format('{%s | %s}', getName(type), getFunctionName(predicate));\n\n    function Subtype(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n      blockNew(this, Subtype);\n\n      // DEBUG HINT: if the debugger stops here, the value cannot be converted to the base type\n      var x = type(value, mut);\n\n      // DEBUG HINT: if the debugger stops here, the value is converted to the base type\n      // but the predicate returns `false`\n      assert(predicate(x), 'Invalid argument `value` = `%s` supplied to subtype type `%s`', value, name);\n      return x;\n    }\n\n    Subtype.meta = {\n      kind: 'subtype',\n      type: type,\n      predicate: predicate,\n      name: name\n    };\n\n    Subtype.displayName = name;\n\n    Subtype.is = function isSubtype(x) {\n      return type.is(x) && predicate(x);\n    };\n\n    Subtype.update = function updateSubtype(instance, spec, value) {\n      return Subtype(update(instance, spec, value));\n    };\n\n    return Subtype;\n  }\n\n  function list(type, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a type\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `list` combinator', type);\n\n    // DEBUG HINT: if the debugger stops here, the third argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `list` combinator', name);\n\n    // DEBUG HINT: always give a name to a type, the debug will be easier\n    name = name || format('Array<%s>', getName(type));\n\n    function List(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, you have used the `new` operator but it's forbidden\n\n      // DEBUG HINT: if the debugger stops here, the value is not one of the defined enums\n      // mouse over the `value` and `name` variables to see what's wrong\n      assert(Arr.is(value), 'Invalid argument `value` = `%s` supplied to list type `%s`', value, name);\n\n      var frozen = (mut !== true);\n\n      // makes List idempotent\n      if (List.isList(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n\n      var arr = [];\n      for (var i = 0, len = value.length ; i < len ; i++ ) {\n        var actual = value[i];\n        // DEBUG HINT: if the debugger stops here, the `actual` value supplied to the `type` type is invalid\n        // mouse over the `actual` and `type` variables to see what's wrong\n        arr.push(type(actual, mut));\n      }\n\n      if (frozen) {\n        Object.freeze(arr);\n      }\n      return arr;\n    }\n\n    List.meta = {\n      kind: 'list',\n      type: type,\n      name: name\n    };\n\n    List.displayName = name;\n\n    List.isList = function isList(x) {\n      return x.every(type.is);\n    };\n\n    List.is = function isList(x) {\n      return Arr.is(x) && List.isList(x);\n    };\n\n    List.update = function updateList(instance, spec, value) {\n      return List(update(instance, spec, value));\n    };\n\n    return List;\n  }\n\n  function dict(domain, codomain, name) {\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a type\n    assert(Type.is(domain), 'Invalid argument `domain` = `%s` supplied to `dict` combinator', domain);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a type\n    assert(Type.is(codomain), 'Invalid argument `codomain` = `%s` supplied to `dict` combinator', codomain);\n\n    // DEBUG HINT: if the debugger stops here, the third argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `dict` combinator', name);\n\n    // DEBUG HINT: always give a name to a type, the debug will be easier\n    name = name || format('{[key:%s]: %s}', getName(domain), getName(codomain));\n\n    function Dict(value, mut) {\n\n      // DEBUG HINT: if the debugger stops here, the value is not an object\n      // mouse over the `value` and `name` variables to see what's wrong\n      assert(Obj.is(value), 'Invalid argument `value` = `%s` supplied to dict type `%s`', value, name);\n\n      var frozen = (mut !== true);\n\n      // makes Dict idempotent\n      if (Dict.isDict(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n\n      var obj = {};\n      for (var k in value) {\n        if (value.hasOwnProperty(k)) {\n          // DEBUG HINT: if the debugger stops here, the `k` value supplied to the `domain` type is invalid\n          // mouse over the `k` and `domain` variables to see what's wrong\n          k = domain(k);\n          var actual = value[k];\n          // DEBUG HINT: if the debugger stops here, the `actual` value supplied to the `codomain` type is invalid\n          // mouse over the `actual` and `codomain` variables to see what's wrong\n          obj[k] = codomain(actual, mut);\n        }\n      }\n\n      if (frozen) {\n        Object.freeze(obj);\n      }\n      return obj;\n    }\n\n    Dict.meta = {\n      kind: 'dict',\n      domain: domain,\n      codomain: codomain,\n      name: name\n    };\n\n    Dict.displayName = name;\n\n    Dict.isDict = function isDict(x) {\n      for (var k in x) {\n        if (x.hasOwnProperty(k)) {\n          if (!domain.is(k) || !codomain.is(x[k])) { return false; }\n        }\n      }\n      return true;\n    };\n\n    Dict.is = function isDict(x) {\n      return Obj.is(x) && Dict.isDict(x);\n    };\n\n\n    Dict.update = function updateDict(instance, spec, value) {\n      return Dict(update(instance, spec, value));\n    };\n\n    return Dict;\n  }\n\n  function func(domain, codomain, name) {\n\n    // handle handy syntax for unary functions\n    domain = Arr.is(domain) ? domain : [domain];\n\n    // DEBUG HINT: if the debugger stops here, the first argument is not a list of types\n    assert(list(Type).is(domain), 'Invalid argument `domain` = `%s` supplied to `func` combinator', domain);\n\n    // DEBUG HINT: if the debugger stops here, the second argument is not a type\n    assert(Type.is(codomain), 'Invalid argument `codomain` = `%s` supplied to `func` combinator', codomain);\n\n    // DEBUG HINT: if the debugger stops here, the third argument is not a string\n    // mouse over the `name` variable to see what's wrong\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `func` combinator', name);\n\n    // DEBUG HINT: always give a name to a type, the debug will be easier\n    name = name || format('(%s) -> %s', domain.map(getName).join(', '), getName(codomain));\n\n    // cache the domain length\n    var domainLen = domain.length;\n\n    function Func(value) {\n\n      // automatically instrument the function if is not already instrumented\n      if (!func.is(value)) {\n        value = Func.of(value);\n      }\n\n      // DEBUG HINT: if the debugger stops here, the first argument is invalid\n      // mouse over the `value` and `name` variables to see what's wrong\n      assert(Func.is(value), 'Invalid argument `value` = `%s` supplied to func type `%s`', value, name);\n\n      return value;\n    }\n\n    Func.meta = {\n      kind: 'func',\n      domain: domain,\n      codomain: codomain,\n      name: name\n    };\n\n    Func.displayName = name;\n\n    Func.is = function isFunc(x) {\n      return func.is(x) &&\n        x.func.domain.length === domain.length &&\n        x.func.domain.every(function isEqual(type, i) {\n          return type === domain[i];\n        }) &&\n        x.func.codomain === codomain;\n    };\n\n    Func.of = function funcOf(f) {\n\n      // DEBUG HINT: if the debugger stops here, f is not a function\n      assert(typeof f === 'function');\n\n      // makes Func.of idempotent\n      if (Func.is(f)) {\n        return f;\n      }\n\n      function fn() {\n\n        var args = slice.call(arguments);\n        var len = Math.min(args.length, domainLen);\n\n        // DEBUG HINT: if the debugger stops here, you provided wrong arguments to the function\n        // mouse over the `args` variable to see what's wrong\n        args = tuple(domain.slice(0, len))(args);\n\n        if (len === domainLen) {\n\n          /* jshint validthis: true */\n          var r = f.apply(this, args);\n\n          // DEBUG HINT: if the debugger stops here, the return value of the function is invalid\n          // mouse over the `r` variable to see what's wrong\n          r = codomain(r);\n\n          return r;\n\n        } else {\n\n          var curried = Function.prototype.bind.apply(f, [this].concat(args));\n          var newdomain = func(domain.slice(len), codomain);\n          return newdomain.of(curried);\n\n        }\n\n      }\n\n      fn.func = {\n        domain: domain,\n        codomain: codomain,\n        f: f\n      };\n\n      return fn;\n\n    };\n\n    return Func;\n\n  }\n\n  // returns true if x is an instrumented function\n  func.is = function isFunc(f) {\n    return Func.is(f) && Obj.is(f.func);\n  };\n\n  return {\n\n    util: {\n      format: format,\n      getKind: getKind,\n      getFunctionName: getFunctionName,\n      getName: getName,\n      mixin: mixin,\n      slice: slice,\n      shallowCopy: shallowCopy,\n      update: update\n    },\n\n    options: options,\n    assert: assert,\n    fail: fail,\n\n    Any: Any,\n    Nil: Nil,\n    Str: Str,\n    Num: Num,\n    Bool: Bool,\n    Arr: Arr,\n    Obj: Obj,\n    Func: Func,\n    Err: Err,\n    Re: Re,\n    Dat: Dat,\n    Type: Type,\n\n    irreducible: irreducible,\n    struct: struct,\n    enums: enums,\n    union: union,\n    maybe: maybe,\n    tuple: tuple,\n    subtype: subtype,\n    list: list,\n    dict: dict,\n    func: func\n  };\n}));\n",
    "(function (root, factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.t = factory();\n  }\n}(this, function () {\n\n  'use strict';\n\n  function fail(message) {\n    // start debugger only once\n    if (!fail.failed) {\n      /*jshint debug: true*/\n      debugger;\n    }\n    fail.failed = true;\n    throw new TypeError(message);\n  }\n\n  function assert(guard, message) {\n    if (guard !== true) {\n      message = message ? format.apply(null, slice.call(arguments, 1)) : 'assert failed';\n      exports.fail(message);\n    }\n  }\n\n  //\n  // utils\n  //\n\n  var slice = Array.prototype.slice;\n\n  function mixin(target, source, overwrite) {\n    if (Nil.is(source)) { return target; }\n    for (var k in source) {\n      if (source.hasOwnProperty(k)) {\n        if (overwrite !== true) {\n          assert(!target.hasOwnProperty(k), 'Cannot overwrite property %s', k);\n        }\n        target[k] = source[k];\n      }\n    }\n    return target;\n  }\n\n  function format() {\n    var args = slice.call(arguments);\n    var len = args.length;\n    var i = 1;\n    var message = args[0];\n\n    function formatArgument(match, type) {\n      if (match === '%%') { return '%'; }       // handle escaping %\n      if (i >= len) { return match; }           // handle less arguments than placeholders\n      var formatter = format.formatters[type];\n      if (!formatter) { return match; }         // handle undefined formatters\n      return formatter(args[i++]);\n    }\n\n    var str = message.replace(/%([a-z%])/g, formatArgument);\n    if (i < len) {\n      str += ' ' + args.slice(i).join(' ');     // handle more arguments than placeholders\n    }\n    return str;\n  }\n\n  function getFunctionName(f) {\n    assert(typeof f === 'function', 'Invalid argument `f` = `%s` supplied to `getFunctionName()`', f);\n    return f.displayName || f.name || format('<function%s>', f.length);\n  }\n\n  function replacer(key, value) {\n    return Func.is(value) ? getFunctionName(value) : value;\n  }\n\n  format.formatters = {\n    s: function (x) { return String(x); },\n    j: function (x) {\n      try { // handle circular references\n        return JSON.stringify(x, replacer);\n      } catch (e) {\n        return String(x);\n      }\n    }\n  };\n\n  function getTypeName(type) {\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `getTypeName()`', type);\n    return type.meta.name;\n  }\n\n  function blockNew(x, type) {\n    assert(!(x instanceof type), 'Operator `new` is forbidden for type `%s`', getTypeName(type));\n  }\n\n  function shallowCopy(x) {\n    return Arr.is(x) ? x.concat() : Obj.is(x) ? mixin({}, x) : x;\n  }\n\n  function update(instance, spec) {\n    assert(Obj.is(spec));\n    var value = shallowCopy(instance);\n    for (var k in spec) {\n      if (spec.hasOwnProperty(k)) {\n        if (update.commands.hasOwnProperty(k)) {\n          assert(Object.keys(spec).length === 1);\n          return update.commands[k](spec[k], value);\n        } else {\n          value[k] = update(value[k], spec[k]);\n        }\n      }\n    }\n    return value;\n  }\n\n  update.commands = {\n    '$apply': function (f, value) {\n      assert(Func.is(f));\n      return f(value);\n    },\n    '$push': function (elements, arr) {\n      assert(Arr.is(elements));\n      assert(Arr.is(arr));\n      return arr.concat(elements);\n    },\n    '$remove': function (keys, obj) {\n      assert(Arr.is(keys));\n      assert(Obj.is(obj));\n      for (var i = 0, len = keys.length ; i < len ; i++ ) {\n        delete obj[keys[i]];\n      }\n      return obj;\n    },\n    '$set': function (value) {\n      return value;\n    },\n    '$splice': function (splices, arr) {\n      assert(list(Arr).is(splices));\n      assert(Arr.is(arr));\n      return splices.reduce(function (acc, splice) {\n        acc.splice.apply(acc, splice);\n        return acc;\n      }, arr);\n    },\n    '$swap': function (config, arr) {\n      assert(Obj.is(config));\n      assert(Num.is(config.from));\n      assert(Num.is(config.to));\n      assert(Arr.is(arr));\n      var element = arr[config.to];\n      arr[config.to] = arr[config.from];\n      arr[config.from] = element;\n      return arr;\n    },\n    '$unshift': function (elements, arr) {\n      assert(Arr.is(elements));\n      assert(Arr.is(arr));\n      return elements.concat(arr);\n    },\n    '$merge': function (obj, value) {\n      return mixin(mixin({}, value), obj, true);\n    }\n  };\n\n  //\n  // irreducibles\n  //\n\n  function irreducible(name, is) {\n\n    assert(typeof name === 'string', 'Invalid argument `name` = `%s` supplied to `irreducible()`', name);\n    assert(typeof is === 'function', 'Invalid argument `is` = `%s` supplied to `irreducible()`', is);\n\n    function Irreducible(value) {\n      blockNew(this, Irreducible);\n      assert(is(value), 'Invalid argument `value` = `%s` supplied to irreducible type `%s`', value, name);\n      return value;\n    }\n\n    Irreducible.meta = {\n      kind: 'irreducible',\n      name: name\n    };\n\n    Irreducible.displayName = name;\n\n    Irreducible.is = is;\n\n    return Irreducible;\n  }\n\n  var Any = irreducible('Any', function () {\n    return true;\n  });\n\n  var Nil = irreducible('Nil', function (x) {\n    return x === null || x === void 0;\n  });\n\n  var Str = irreducible('Str', function (x) {\n    return typeof x === 'string';\n  });\n\n  var Num = irreducible('Num', function (x) {\n    return typeof x === 'number' && isFinite(x) && !isNaN(x);\n  });\n\n  var Bool = irreducible('Bool', function (x) {\n    return x === true || x === false;\n  });\n\n  var Arr = irreducible('Arr', function (x) {\n    return x instanceof Array;\n  });\n\n  var Obj = irreducible('Obj', function (x) {\n    return !Nil.is(x) && typeof x === 'object' && !Arr.is(x);\n  });\n\n  var Func = irreducible('Func', function (x) {\n    return typeof x === 'function';\n  });\n\n  var Err = irreducible('Err', function (x) {\n    return x instanceof Error;\n  });\n\n  var Re = irreducible('Re', function (x) {\n    return x instanceof RegExp;\n  });\n\n  var Dat = irreducible('Dat', function (x) {\n    return x instanceof Date;\n  });\n\n  var Type = irreducible('Type', function (x) {\n    return Func.is(x) && Obj.is(x.meta);\n  });\n\n  function struct(props, name) {\n\n    assert(dict(Str, Type).is(props), 'Invalid argument `props` = `%s` supplied to `struct` combinator', props);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `struct` combinator', name);\n    name = name || format('{%s}', Object.keys(props).map(function (prop) {\n      return format('%s: %s', prop, getTypeName(props[prop]));\n    }).join(', '));\n\n    function Struct(value, mut) {\n      // makes Struct idempotent\n      if (Struct.is(value)) {\n        return value;\n      }\n      assert(Obj.is(value), 'Invalid argument `value` = `%s` supplied to struct type `%s`', value, name);\n      // makes `new` optional\n      if (!(this instanceof Struct)) {\n        return new Struct(value, mut);\n      }\n      for (var k in props) {\n        if (props.hasOwnProperty(k)) {\n          var expected = props[k];\n          var actual = value[k];\n          this[k] = expected(actual, mut);\n        }\n      }\n      if (mut !== true) {\n        Object.freeze(this);\n      }\n    }\n\n    Struct.meta = {\n      kind: 'struct',\n      props: props,\n      name: name\n    };\n\n    Struct.displayName = name;\n\n    Struct.is = function (x) {\n      return x instanceof Struct;\n    };\n\n    Struct.update = function (instance, spec) {\n      return new Struct(exports.update(instance, spec));\n    };\n\n    Struct.extend = function (arr, name) {\n      arr = [].concat(arr).map(function (x) {\n        return Obj.is(x) ? x : x.meta.props;\n      });\n      arr.unshift(props);\n      var ret = struct(arr.reduce(mixin, {}), name);\n      mixin(ret.prototype, Struct.prototype); // prototypal inheritance\n      return ret;\n    };\n\n    return Struct;\n  }\n\n  function union(types, name) {\n\n    assert(list(Type).is(types), 'Invalid argument `types` = `%s` supplied to `union` combinator', types);\n    var len = types.length;\n    var defaultName = types.map(getTypeName).join(' | ');\n    assert(len >= 2, 'Invalid argument `types` = `%s` supplied to `union` combinator, provide at least two types', defaultName);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `union` combinator', name);\n    name = name || defaultName;\n\n    function Union(value, mut) {\n      blockNew(this, Union);\n      assert(Func.is(Union.dispatch), 'Unimplemented `dispatch()` function for union type `%s`', name);\n      var type = Union.dispatch(value);\n      assert(Type.is(type), 'The `dispatch()` function of union type `%s` returns no type constructor', name);\n      return type(value, mut);\n    }\n\n    Union.meta = {\n      kind: 'union',\n      types: types,\n      name: name\n    };\n\n    Union.displayName = name;\n\n    Union.is = function (x) {\n      return types.some(function (type) {\n        return type.is(x);\n      });\n    };\n\n    // default dispatch implementation\n    Union.dispatch = function (x) {\n      for (var i = 0 ; i < len ; i++ ) {\n        if (types[i].is(x)) {\n          return types[i];\n        }\n      }\n    };\n\n    return Union;\n  }\n\n  function maybe(type, name) {\n\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `maybe` combinator', type);\n    // makes the combinator idempotent and handle Any, Nil\n    if (type.meta.kind === 'maybe' || type === Any || type === Nil) {\n      return type;\n    }\n    assert(Nil.is(name) || Str.is(name), 'Invalid argument `name` = `%s` supplied to `maybe` combinator', name);\n    name = name || ('?' + getTypeName(type));\n\n    function Maybe(value, mut) {\n      blockNew(this, Maybe);\n      return Nil.is(value) ? null : type(value, mut);\n    }\n\n    Maybe.meta = {\n      kind: 'maybe',\n      type: type,\n      name: name\n    };\n\n    Maybe.displayName = name;\n\n    Maybe.is = function (x) {\n      return Nil.is(x) || type.is(x);\n    };\n\n    return Maybe;\n  }\n\n  function enums(map, name) {\n\n    assert(Obj.is(map), 'Invalid argument `map` = `%s` supplied to `enums` combinator', map);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `enums` combinator', name);\n    var keys = Object.keys(map); // cache enums\n    name = name || keys.map(function (k) { return JSON.stringify(k); }).join(' | ');\n\n    function Enums(value) {\n      blockNew(this, Enums);\n      assert(Enums.is(value), 'Invalid argument `value` = `%s` supplied to enums type `%s`, expected one of %j', value, name, keys);\n      return value;\n    }\n\n    Enums.meta = {\n      kind: 'enums',\n      map: map,\n      name: name\n    };\n\n    Enums.displayName = name;\n\n    Enums.is = function (x) {\n      return Str.is(x) && map.hasOwnProperty(x);\n    };\n\n    return Enums;\n  }\n\n  enums.of = function (keys, name) {\n    keys = Str.is(keys) ? keys.split(' ') : keys;\n    var value = {};\n    keys.forEach(function (k) {\n      value[k] = k;\n    });\n    return enums(value, name);\n  };\n\n  function tuple(types, name) {\n\n    assert(list(Type).is(types), 'Invalid argument `types` = `%s` supplied to `tuple` combinator', types);\n    var len = types.length; // cache types length\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `tuple` combinator', name);\n    name = name || format('[%s]', types.map(getTypeName).join(', '));\n\n    function isTuple(x) {\n      return types.every(function (type, i) {\n        return type.is(x[i]);\n      });\n    }\n\n    function Tuple(value, mut) {\n      assert(Arr.is(value) && value.length === len, 'Invalid argument `value` = `%s` supplied to tuple type `%s`, expected an `Arr` of length `%s`', value, name, len);\n      var frozen = (mut !== true);\n      // makes Tuple idempotent\n      if (isTuple(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n      var arr = [];\n      for (var i = 0 ; i < len ; i++) {\n        var expected = types[i];\n        var actual = value[i];\n        arr.push(expected(actual, mut));\n      }\n      if (frozen) {\n        Object.freeze(arr);\n      }\n      return arr;\n    }\n\n    Tuple.meta = {\n      kind: 'tuple',\n      types: types,\n      length: len,\n      name: name\n    };\n\n    Tuple.displayName = name;\n\n    Tuple.is = function (x) {\n      return Arr.is(x) && x.length === len && isTuple(x);\n    };\n\n    Tuple.update = function (instance, spec) {\n      return Tuple(exports.update(instance, spec));\n    };\n\n    return Tuple;\n  }\n\n  function subtype(type, predicate, name) {\n\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `subtype` combinator', type);\n    assert(Func.is(predicate), 'Invalid argument `predicate` = `%s` supplied to `subtype` combinator', predicate);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `subtype` combinator', name);\n    name = name || format('{%s | %s}', getTypeName(type), getFunctionName(predicate));\n\n    function Subtype(value, mut) {\n      blockNew(this, Subtype);\n      var x = type(value, mut);\n      assert(predicate(x), 'Invalid argument `value` = `%s` supplied to subtype type `%s`', value, name);\n      return x;\n    }\n\n    Subtype.meta = {\n      kind: 'subtype',\n      type: type,\n      predicate: predicate,\n      name: name\n    };\n\n    Subtype.displayName = name;\n\n    Subtype.is = function (x) {\n      return type.is(x) && predicate(x);\n    };\n\n    Subtype.update = function (instance, spec) {\n      return Subtype(exports.update(instance, spec));\n    };\n\n    return Subtype;\n  }\n\n  function list(type, name) {\n\n    assert(Type.is(type), 'Invalid argument `type` = `%s` supplied to `list` combinator', type);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `list` combinator', name);\n    name = name || format('Array<%s>', getTypeName(type));\n\n    function isList(x) {\n      return x.every(type.is);\n    }\n\n    function List(value, mut) {\n      assert(Arr.is(value), 'Invalid argument `value` = `%s` supplied to list type `%s`', value, name);\n      var frozen = (mut !== true);\n      // makes List idempotent\n      if (isList(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n      var arr = [];\n      for (var i = 0, len = value.length ; i < len ; i++ ) {\n        var actual = value[i];\n        arr.push(type(actual, mut));\n      }\n      if (frozen) {\n        Object.freeze(arr);\n      }\n      return arr;\n    }\n\n    List.meta = {\n      kind: 'list',\n      type: type,\n      name: name\n    };\n\n    List.displayName = name;\n\n    List.is = function (x) {\n      return Arr.is(x) && isList(x);\n    };\n\n    List.update = function (instance, spec) {\n      return List(exports.update(instance, spec));\n    };\n\n    return List;\n  }\n\n  function dict(domain, codomain, name) {\n\n    assert(Type.is(domain), 'Invalid argument `domain` = `%s` supplied to `dict` combinator', domain);\n    assert(Type.is(codomain), 'Invalid argument `codomain` = `%s` supplied to `dict` combinator', codomain);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `dict` combinator', name);\n    name = name || format('{[key:%s]: %s}', getTypeName(domain), getTypeName(codomain));\n\n    function isDict(x) {\n      for (var k in x) {\n        if (x.hasOwnProperty(k)) {\n          if (!domain.is(k) || !codomain.is(x[k])) { return false; }\n        }\n      }\n      return true;\n    }\n\n    function Dict(value, mut) {\n      assert(Obj.is(value), 'Invalid argument `value` = `%s` supplied to dict type `%s`', value, name);\n      var frozen = (mut !== true);\n      // makes Dict idempotent\n      if (isDict(value) && Object.isFrozen(value) === frozen) {\n        return value;\n      }\n      var obj = {};\n      for (var k in value) {\n        if (value.hasOwnProperty(k)) {\n          k = domain(k);\n          var actual = value[k];\n          obj[k] = codomain(actual, mut);\n        }\n      }\n      if (frozen) {\n        Object.freeze(obj);\n      }\n      return obj;\n    }\n\n    Dict.meta = {\n      kind: 'dict',\n      domain: domain,\n      codomain: codomain,\n      name: name\n    };\n\n    Dict.displayName = name;\n\n    Dict.is = function (x) {\n      return Obj.is(x) && isDict(x);\n    };\n\n    Dict.update = function (instance, spec) {\n      return Dict(exports.update(instance, spec));\n    };\n\n    return Dict;\n  }\n\n  function isInstrumented(f) {\n    return Func.is(f) && Obj.is(f.type);\n  }\n\n  function func(domain, codomain, name) {\n\n    // handle handy syntax for unary functions\n    domain = Arr.is(domain) ? domain : [domain];\n    assert(list(Type).is(domain), 'Invalid argument `domain` = `%s` supplied to `func` combinator', domain);\n    assert(Type.is(codomain), 'Invalid argument `codomain` = `%s` supplied to `func` combinator', codomain);\n    assert(maybe(Str).is(name), 'Invalid argument `name` = `%s` supplied to `func` combinator', name);\n    name = name || format('(%s) => %s', domain.map(getTypeName).join(', '), getTypeName(codomain));\n    var domainLen = domain.length; // cache the domain length\n\n    function Func(value) {\n      // automatically instrument the function\n      if (!isInstrumented(value)) {\n        return Func.of(value);\n      }\n      assert(Func.is(value), 'Invalid argument `value` = `%s` supplied to func type `%s`', value, name);\n      return value;\n    }\n\n    Func.meta = {\n      kind: 'func',\n      domain: domain,\n      codomain: codomain,\n      name: name\n    };\n\n    Func.displayName = name;\n\n    Func.is = function (x) {\n      return isInstrumented(x) &&\n        x.type.domain.length === domainLen &&\n        x.type.domain.every(function (type, i) {\n          return type === domain[i];\n        }) &&\n        x.type.codomain === codomain;\n    };\n\n    Func.of = function (f) {\n\n      assert(typeof f === 'function');\n\n      // makes Func.of idempotent\n      if (Func.is(f)) {\n        return f;\n      }\n\n      function fn() {\n        var args = slice.call(arguments);\n        var len = args.length;\n        var argsType = tuple(domain.slice(0, len));\n        args = argsType(args);\n        if (len === domainLen) {\n          /* jshint validthis: true */\n          return codomain(f.apply(this, args));\n        } else {\n          var curried = Function.prototype.bind.apply(f, [this].concat(args));\n          var newdomain = func(domain.slice(len), codomain);\n          return newdomain.of(curried);\n        }\n      }\n\n      fn.type = {\n        domain: domain,\n        codomain: codomain,\n        f: f\n      };\n\n      fn.displayName = getFunctionName(f);\n\n      return fn;\n\n    };\n\n    return Func;\n\n  }\n\n  var exports = {\n    format: format,\n    getFunctionName: getFunctionName,\n    getTypeName: getTypeName,\n    mixin: mixin,\n    slice: slice,\n    shallowCopy: shallowCopy,\n    update: update,\n    assert: assert,\n    fail: fail,\n    Any: Any,\n    Nil: Nil,\n    Str: Str,\n    Num: Num,\n    Bool: Bool,\n    Arr: Arr,\n    Obj: Obj,\n    Func: Func,\n    Err: Err,\n    Re: Re,\n    Dat: Dat,\n    Type: Type,\n    irreducible: irreducible,\n    struct: struct,\n    enums: enums,\n    union: union,\n    maybe: maybe,\n    tuple: tuple,\n    subtype: subtype,\n    list: list,\n    dict: dict,\n    func: func\n  };\n\n  return exports;\n\n}));\n",
    "//     Underscore.js 1.8.2\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.2';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var isArrayLike = function(collection) {\n    var length = collection && collection.length;\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    if (array == null) return [];\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = array.length; i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, 'length').length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = list && list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    var i = 0, length = array && array.length;\n    if (typeof isSorted == 'number') {\n      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n    } else if (isSorted && length) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (item !== item) {\n      return _.findIndex(slice.call(array, i), _.isNaN);\n    }\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  _.lastIndexOf = function(array, item, from) {\n    var idx = array ? array.length : 0;\n    if (typeof from == 'number') {\n      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n    }\n    if (item !== item) {\n      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);\n    }\n    while (--idx >= 0) if (array[idx] === item) return idx;\n    return -1;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = array != null && array.length;\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createIndexFinder(1);\n\n  _.findLastIndex = createIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    \n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of \n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n",
    "var t = require('tcomb-validation');\n\nvar GestureRecognizerProtocol = require('../Protocols/GestureRecognizerProtocol');\n\nvar GestureRecognizerDelegate = t.struct({\n    gestureRecognizerShouldBegin: t.maybe(t.func(GestureRecognizerProtocol, t.Bool, 'gestureRecognizerShouldBegin')),\n    gestureRecognizershouldReceiveTouch: t.maybe(t.func(GestureRecognizerProtocol, t.Bool, 'gestureRecognizershouldReceiveTouch'))\n    //gestureRecognizershouldRecognizeSimultaneouslyWithGestureRecognizer: t.maybe(t.func([GestureRecognizerProtocol, GestureRecognizerProtocol], t.Bool)),\n    //gestureRecognizershouldRequireFailureOfGestureRecognizer: t.maybe(t.func([GestureRecognizerProtocol, GestureRecognizerProtocol], t.Bool)),\n    //gestureRecognizershouldBeRequiredToFailByGestureRecognizer: t.maybe(t.func([GestureRecognizerProtocol, GestureRecognizerProtocol], t.Bool))\n}, 'GestureRecognizerDelegate');\n\nmodule.exports = GestureRecognizerDelegate;",
    "var t = require('tcomb');\n\nvar GestureRecognizerState = t.enums.of(\"None Possible Began Changed Ended Cancelled Failed \");\n\nmodule.exports.GestureRecognizerState = GestureRecognizerState;\n\n\n\n",
    "var t = require('tcomb-validation');\nvar _ = require('underscore');\n\nvar GestureRecognizerProtocol = require('./Protocols/GestureRecognizerProtocol');\nvar GestureRecognizerDelegate = require('./Delegates/GestureRecognizerDelegate');\n\nfunction GestureRecognizerBaseFactory() {\n    var state = \"None\";\n    var touches = [];\n    var enabled = false;\n    var allTouchesEnded = true;\n    function getTouch(identifier) {\n        for(var i = 0; i < touches.length; i++) {\n            if(touches[i].identifier == identifier) {\n                return touches[i];\n            }\n        }\n        return null;\n    };\n\n    var defaultDelegate = new GestureRecognizerDelegate({\n        gestureRecognizerShouldBegin: function(gestureRecognizer) {\n            return true;\n        },\n        gestureRecognizershouldReceiveTouch: function(gestureRecognizer) {\n            return true;\n        }\n    }, true); //mutable\n\n    var GestureRecognizerBase = {\n        targetView: null,\n        callback: null,\n        requiredGestureRecognizerToFail: null,\n        delegate: defaultDelegate,\n        stateFailedOrEndedCallback: null,\n        getState: function () {\n            return state;\n        },\n        getView: function () {\n            return this.targetView;\n        },\n        isEnabled: function () {\n            return enabled;\n        },\n        setEnabled: function (isEnabled) {\n            enabled = isEnabled;\n        },\n        getNumberOfTouches: function () {\n            return touches.length;\n        },\n        locationOfTouch: function (touchNum) {\n            return touches[touchNum].lastLocation;\n        },\n        addTargetForCallback: function (targetView, callback) {\n            this.targetView = targetView;\n            this.callback = callback;\n        },\n        getTouches: function () {\n            return touches;\n        },\n        onGestureDown: function (newTouches) {\n            var pureTouches = [];\n            if (allTouchesEnded) {\n                touches = [];\n            }\n            allTouchesEnded = false;\n            for (var i = 0; i < newTouches.length; i++) {\n                var touch = getTouch(newTouches[i].identifier);\n                if (!touch) {\n                    var touch = newTouches[i];\n                    touches.push(touch);\n                }\n\n                pureTouches.push(touch);\n            }\n\n            if(this.touchesBegan && this.isActive() || this.getState() == \"None\") {\n                this.touchesBegan(pureTouches);\n            }\n        },\n        onGestureMove: function (movedTouches) {\n            var pureTouches = [];\n            if (allTouchesEnded) {\n                return;\n            }\n            for (var i = 0; i < movedTouches.length; i++) {\n                var touch = getTouch(movedTouches[i].identifier);\n                touch.onMoved(movedTouches[i].startLocation);\n                pureTouches.push(touch);\n            }\n\n            var state = this.getState();\n            if(this.touchesMoved  && this.isActive()) {\n                this.touchesMoved(pureTouches);\n            }\n        },\n        onGestureUp: function (endedTouches) {\n            var pureTouches = [];\n            for (var i = 0; i < endedTouches.length; i++) {\n                var touch = getTouch(endedTouches[i].identifier);\n                touch.onEnded(endedTouches[i].startLocation);\n                pureTouches.push(touch);\n            }\n\n            allTouchesEnded = true;\n            for (var i = 0; i < touches.length; i++) {\n                if (!touches[i].touchEndTime) {\n                    allTouchesEnded = false;\n                }\n            }\n\n            var state = this.getState();\n            if(this.touchesEnded && this.isActive()) {\n                this.touchesEnded(pureTouches);\n            }\n        },\n        setGestureRecognizerDelegate: function(gestureRecognizerDelegate) {\n            var completeDelegate = _.defaults({}, gestureRecognizerDelegate, defaultDelegate); //this way no need to check if delegate responds to method exists\n            this.delegate = completeDelegate;\n        },\n        setRequiresGestureRecognizerToFail: function(gestureRecognizer) {\n            this.requiredGestureRecognizerToFail = gestureRecognizer;\n        },\n        isActive: function() {\n            var currentState = this.getState();\n            return currentState == \"Possible\" || currentState == \"Began\" || currentState == \"Changed\";\n\n        },\n        stateFailedOrEnded: function() {\n            if(this.stateFailedOrEndedCallback) {\n                this.stateFailedOrEndedCallback();\n            }\n        },\n        logDebugInfo: function(shouldLog) {\n\n        }\n    };\n\n    //console.log(\"IsGestureRecognizerBase a GestureRecognizerProtocol:\" +GestureRecognizerProtocol.is(GestureRecognizerBase));\n    return GestureRecognizerBase;\n}\n\nmodule.exports = GestureRecognizerBaseFactory;\n\n\n\n",
    "var _ = require('underscore');\n\nvar Models = require('JSCoreGraphics').CoreGraphics.Geometry.DataTypes;\nvar Touch = require('./Touch');\n\nvar shouldLogGestureInfo = false;\nvar logContext = \"ReactGestureRecognizerMixin\";\nvar logGestureInfo = function(logString) {\n    if(shouldLogGestureInfo) {\n        console.log(logContext + ' - ' +logString);\n    }\n}\n\nfunction ReactGestureRecognizerMixinFactory() {\n    var ReactGestureRecognizerMixin = {\n        componentWillMount: function() {\n\n        },\n\n        componentDidMount: function() {\n            var node = this.getDOMNode();\n\n            node.addEventListener('mousedown', this.gestureRecognizerOnMouseDown);\n            window.addEventListener('mousemove', this.gestureRecognizerOnMouseMove);\n            window.addEventListener('mouseup', this.gestureRecognizerOnMouseUp);\n\n            node.addEventListener('touchstart', this.gestureRecognizerOnTouchStart);\n            window.addEventListener('touchmove', this.gestureRecognizerOnTouchMove);\n            window.addEventListener('touchend', this.gestureRecognizerOnTouchEnd);\n\n            if(!this.shouldAllowTouchToBubble) {\n                this.shouldAllowTouchToBubble = false;\n            }\n\n            if(this.logMixinDebugInfo) {\n                shouldLogGestureInfo = this.logMixinDebugInfo;\n            }\n            logGestureInfo(\"componentDidMount\");\n        },\n\n        componentWillUnmount: function() {\n            var node = this.getDOMNode();\n\n            node.removeEventListener('mousedown', this.gestureRecognizerOnMouseDown);\n            window.removeEventListener('mousemove', this.gestureRecognizerOnMouseMove);\n            window.removeEventListener('mouseup', this.gestureRecognizerOnMouseUp);\n\n            node.removeEventListener('touchstart', this.gestureRecognizerOnTouchStart);\n            window.removeEventListener('touchmove', this.gestureRecognizerOnTouchMove);\n            window.removeEventListener('touchend', this.gestureRecognizerOnTouchEnd);\n\n            logGestureInfo(\"componentWillUnmount\");\n        },\n\n        addedLocalDelegate: false,\n\n        //TODO: this should be called on each listening gesture to see if any will handle touch or delegated to mixins super\n        shouldHandleGesture: function(e, isTouch) {\n            if(isTouch) {\n                return this.shouldHandleTouchGestures;\n            } else {\n                return this.shouldHandleMouseGestures;\n            }\n        },\n\n        shouldPreventDefault: function() {\n            return !this.shouldAllowTouchToBubble;\n        },\n\n        isAnyGestureCurrentlyActive: function() {\n            var isActive = false;\n            for(var i = 0; i < this.gestureRecognizers.length; i++) {\n                if(this.gestureRecognizers[i].isActive()) {\n                    isActive = true;\n                    break;\n                }\n            }\n\n            //logGestureInfo(\"isAnyGestureCurrentlyActive: \" + isActive);\n            return isActive;\n        },\n\n        resetRecognizers: function() {\n            for(var i = 0; i < this.gestureRecognizers.length; i++) {\n                this.gestureRecognizers[i].reset();\n            }\n\n            logGestureInfo(\"resetRecognizers\");\n        },\n\n        onGestureStateChanged: function() {\n            var anyActive = this.isAnyGestureCurrentlyActive();\n            logGestureInfo(\"onGestureStateChanged.  anyActive: \" + anyActive);\n            if(!anyActive) {\n                this.resetRecognizers();\n            }\n        },\n\n        gestureRecognizerOnMouseDown: function(e) {\n            if(this.shouldHandleGesture(e, false)) {\n                var point = new Models.Point({x: e.pageX, y: e.pageY});\n                var touch = new Touch(1, point, e.relatedTarget);\n                this.gestureRecognizerOnGestureDown(touch, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnMouseDown.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnMouseMove: function(e) {\n            if(this.shouldHandleGesture(e, false)  && this.isAnyGestureCurrentlyActive()) {\n                var point = new Models.Point({x: e.pageX, y: e.pageY});\n                var touch = new Touch(1, point, e.relatedTarget);\n                this.gestureRecognizerOnGestureMove(touch, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnMouseMove.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnMouseUp: function(e) {\n            if(this.shouldHandleGesture(e, false)) {\n                var point = new Models.Point({x: e.pageX, y: e.pageY});\n                var touch = new Touch(1, point, e.relatedTarget);\n                this.gestureRecognizerOnGestureUp(touch, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnMouseUp.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnTouchStart: function(e) {\n            if(this.shouldHandleGesture(e, true)) {\n                var touches = [];\n                for (var i = 0; i < e.changedTouches.length; i++) {\n                    var point = new Models.Point({x: e.changedTouches[i].pageX, y: e.changedTouches[i].pageY});\n                    var touch = new Touch(e.changedTouches[i].identifier, point, e.changedTouches[i].target);\n\n                    touches.push(touch);\n                }\n\n                this.gestureRecognizerOnGestureDown(touches, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnTouchStart.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnTouchMove: function(e) {\n            var touchOne = {\n                pageX: e.touches && e.touches.length > 0 ? e.touches[0].pageX : \"NA\",\n                pageY: e.touches && e.touches.length > 0 ? e.touches[0].pageY : \"NA\"\n            };\n\n            var changedTouchOne = {\n                pageX: e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches[0].pageX : \"NA\",\n                pageY: e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches[0].pageY : \"NA\"\n            };\n            logGestureInfo(\"gestureRecognizerOnTouchMove - touches: \" + JSON.stringify(touchOne, null) + \", changedTouches: \" + JSON.stringify(changedTouchOne, null));\n            if(this.shouldHandleGesture(e, true) && this.isAnyGestureCurrentlyActive()) {\n                var touches = [];\n                for (var i = 0; i < e.changedTouches.length; i++) {\n                    var point = new Models.Point({x: e.changedTouches[i].pageX, y: e.changedTouches[i].pageY});\n                    var touch = new Touch(e.changedTouches[i].identifier, point, e.changedTouches[i].target);\n\n                    touches.push(touch);\n                }\n\n                this.gestureRecognizerOnGestureMove(touches, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnTouchStart.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnTouchEnd: function(e) {\n            if(this.shouldHandleGesture(e, true)) {\n                var touches = [];\n                for (var i = 0; i < e.changedTouches.length; i++) {\n                    var point = new Models.Point({x: e.changedTouches[i].pageX, y: e.changedTouches[i].pageY});\n                    var touch = new Touch(e.changedTouches[i].identifier, point, e.changedTouches[i].target);\n\n                    touches.push(touch);\n                }\n\n                this.gestureRecognizerOnGestureUp(touches, function(shouldPreventDefault) {\n                    logGestureInfo(\"gestureRecognizerOnTouchEnd.  ShouldPreventDefault: \" + shouldPreventDefault);\n                    if(shouldPreventDefault) {\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        gestureRecognizerOnGestureDown: function(touches, shouldPreventDefaultCallback) {\n            if(!this.addedLocalDelegate) {//hackety hack\n                this.addedLocalDelegate = true;\n                for(var i = 0; i < this.gestureRecognizers.length; i++) {\n                    this.gestureRecognizers[i].stateFailedOrEndedCallback = this.onGestureStateChanged;\n                }\n            }\n            if(!_.isArray(touches)) {\n                touches = [touches];\n            }\n\n            for(var i = 0; i < this.gestureRecognizers.length; i++) {\n                this.gestureRecognizers[i].onGestureDown(touches);\n            }\n\n            var anyActive = this.isAnyGestureCurrentlyActive();\n            shouldPreventDefaultCallback(anyActive && this.shouldPreventDefault());\n\n        },\n\n        gestureRecognizerOnGestureMove: function(touches, shouldPreventDefaultCallback) {\n            if (this.isAnyGestureCurrentlyActive()) {\n                if (!_.isArray(touches)) {\n                    touches = [touches];\n                }\n\n                for (var i = 0; i < this.gestureRecognizers.length; i++) {\n                    this.gestureRecognizers[i].onGestureMove(touches);\n                }\n\n                var anyActive = this.isAnyGestureCurrentlyActive();\n                shouldPreventDefaultCallback(anyActive && this.shouldPreventDefault());\n            }\n        },\n\n        gestureRecognizerOnGestureUp: function(touches, shouldPreventDefaultCallback) {\n            if (!_.isArray(touches)) {\n                touches = [touches];\n            }\n\n            for (var i = 0; i < this.gestureRecognizers.length; i++) {\n                this.gestureRecognizers[i].onGestureUp(touches);\n            }\n\n            var anyActive = this.isAnyGestureCurrentlyActive();\n            if (!anyActive) {\n                this.resetRecognizers();\n            }\n\n            shouldPreventDefaultCallback(anyActive && this.shouldPreventDefault());\n        }\n    };\n\n    return ReactGestureRecognizerMixin;\n}\n\nmodule.exports = ReactGestureRecognizerMixinFactory;",
    "var t = require('tcomb-validation');\n\nvar Geometry = require('JSCoreGraphics').CoreGraphics.Geometry;\nvar TouchProtocol = require('./TouchProtocol');\nvar GestureRecognizerState = require('../Enums/GestureRecognizerEnums').GestureRecognizerState;\n\nvar GestureRecognizerProtocol = t.struct({\n    targetView: t.Any,\n    callback: t.Any,\n    requiredGestureRecognizerToFail: t.maybe(t.Any),\n    delegate: t.maybe(t.Any),\n    getState: t.func(t.Nil, GestureRecognizerState, 'getState'),\n    getView: t.func(t.Nil, t.Any, 'getView'),\n    isEnabled: t.func(t.Nil, t.Str, 'isEnabled'),\n    setEnabled: t.func(t.Bool, t.Nil, 'setEnabled'),\n    getNumberOfTouches: t.func(t.Nil, t.Num, 'getNumberOfTouches'),\n    locationOfTouch: t.func(t.Num, Geometry.DataTypes.Point, 'locationOfTouch'),\n    addTargetForCallback: t.func([t.Any, t.Func], t.Any, 'addTargetForCallback'),\n    getTouches: t.func(t.Any, t.Arr, 'getTouches'),\n    onGestureDown: t.func(t.Arr, t.Nil, 'onGestureDown'),\n    onGestureUp: t.func(t.Arr, t.Nil, 'onGestureUp'),\n    onGestureMove: t.func(t.Arr, t.Nil, 'onGestureMove'),\n    setGestureRecognizerDelegate: t.func(t.Obj, t.Nil, 'setGestureRecognizerDelegate'),\n    setRequiresGestureRecognizerToFail: t.func(t.Obj, t.Nil, 'setRequiresGestureRecognizerToFail'),\n    isActive: t.func(t.Nil, t.Bool, 'isActive'),\n    stateFailedOrEndedCallback: t.maybe(t.func(t.Any, t.Any, 'stateFailedOrEndedCallback')),\n    stateFailedOrEnded: t.func(t.Nil, t.Nil, 'stateFailedOrEnded'),\n\n    //To be implemented by subclass\n    touchesBegan: t.maybe(t.func(t.list(TouchProtocol), t.Nil, 'touchesBegan')),\n    touchesMoved: t.maybe(t.func(t.list(TouchProtocol), t.Nil, 'touchesMoved')),\n    touchesEnded: t.maybe(t.func(t.list(TouchProtocol), t.Nil, 'touchesEnded')),\n    touchesCancelled: t.maybe(t.func(t.list(TouchProtocol), t.Nil, 'touchesCancelled')),\n    reset: t.maybe(t.func(t.Nil, t.Nil, 'reset')),\n    logDebugInfo: t.maybe(t.func(t.Bool, t.Nil, 'shouldLogDebugInfo'))\n});\n\nmodule.exports= GestureRecognizerProtocol;\n\n\n\n",
    "var t = require('tcomb-validation');\nvar Models = require('JSCoreGraphics').CoreGraphics.Geometry.DataTypes;\n\nvar magnitude = function(x, y) {\n    return Math.sqrt(x * x + y * y);\n};\n\nvar TouchProtocol = t.struct({\n    identifier: t.Str,\n    target: t.Any,\n    startLocation: Models.Point,\n    lastLocation: Models.Point,\n    touchStartTime: t.Num,\n    touchLastMoveTime: t.Num,\n    touchEndTime: t.maybe(t.Num),\n    maxX: t.Num,\n    maxY: t.Num,\n    minX: t.Num,\n    minY: t.Num\n}, 'TouchProtocol');\n\nTouchProtocol.prototype.getTouchDuration = function() {\n    return Date.now() - this.touchStartTime;\n};\n\nTouchProtocol.prototype.getVelocity = function() {\n    var velocity = {\n        x: 0,\n        y: 0,\n        magnitude: 0\n    };\n\n    if (this.lastLocation && this.touchLastMoveTime) {\n        var deltaX = this.lastLocation.x - this.startLocation.x;\n        var deltaY = this.lastLocation.y - this.startLocation.y;\n        var deltaT = this.touchLastMoveTime - this.touchStartTime;\n        velocity.x = deltaX / deltaT;\n        velocity.y = deltaY / deltaT;\n        velocity.magnitude = magnitude(deltaX, deltaY);\n    }\n\n    return velocity;\n};\n\nTouchProtocol.prototype.onMoved = function(newLocation) {\n    if(!newLocation) {\n        return;\n    }\n    this.lastLocation = newLocation;\n    this.touchLastMoveTime = Date.now();\n\n    if(newLocation.x > this.maxX) {\n        this.maxX = newLocation.x;\n    }\n    if(newLocation.x < this.minX) {\n        this.minX = newLocation.x;\n    }\n    if(newLocation.y > this.maxY) {\n        this.maxY = newLocation.y;\n    }\n    if(newLocation.y < this.minY) {\n        this.minY = newLocation.y;\n    }\n};\n\nTouchProtocol.prototype.onEnded = function(endLocation) {\n    this.lastLocation = endLocation;\n    this.touchEndTime = Date.now();\n};\n\nTouchProtocol.prototype.getCurrentTranslation = function() {\n    var deltaX = this.lastLocation.x - this.startLocation.x;\n    var deltaY = this.lastLocation.y - this.startLocation.y;\n\n    return new Models.Point({\n        x: deltaX,\n        y: deltaY\n    });\n};\n\n//This isn't really correct but... ehh for now\nTouchProtocol.prototype.getMaxTranslation = function() {\n    var maxXDistance = Math.max(Math.abs(this.minX - this.startLocation.x), Math.abs(this.maxX - this.startLocation.x));\n    var maxYDistance = Math.max(Math.abs(this.minY - this.startLocation.y), Math.abs(this.maxY - this.startLocation.y));\n\n    return new Models.Point({\n        x: maxXDistance,\n        y: maxYDistance\n    });\n};\n\nmodule.exports = TouchProtocol;\n",
    "var t = require('tcomb-validation');\nvar _ = require('underscore');\n\nvar GestureRecognizerProtocol = require('../Protocols/GestureRecognizerProtocol');\nvar GestureRecognizerBase = require('../GestureRecognizerBase');\n\nvar PanGestureRecognizerProtocol = GestureRecognizerProtocol.extend( new t.struct({\n}, 'PanGestureRecognizerProtocol'));\n\nfunction PanGestureRecognizerFactory() {\n    var shouldLogGesture = false;\n    var logGestureContext = \"PanGesture - \";\n    var logGestureInfo = function(logString) {\n        if(shouldLogGesture) {\n            console.log(logGestureContext + logString);\n        }\n    }\n\n    var _maxTouches = 1;\n    var _minTouches = 1;\n    var _state = \"None\";\n    var MIN_DISTANCE_FOR_BEGAN = 5;\n\n    function restart() {\n        _state = \"None\";\n    }\n\n    var PanGestureRecognizerBase = {\n        reset: function(){\n            restart();\n        },\n        logDebugInfo: function(shouldLog) {\n            shouldLogGesture = shouldLog;\n        },\n        touchesBegan: function(touches) {\n            if(!touches && touches.length < _minTouches || touches.length > _maxTouches) {\n                _state = \"Failed\";\n                logGestureInfo('Touhes Began - Invalid number of Touches: ' + touches.length ? touches.length : 0 + ', state: ' + _state);\n            }\n            else {\n                _state = \"Possible\";\n                logGestureInfo('Gesture Began, state: ' + _state);\n            }\n            if(this.callback) {\n                this.callback(this);\n            }\n        },\n        touchesMoved: function(touches) {\n            if(!touches && touches.length < _minTouches || touches.length > _maxTouches) {\n                _state = \"Failed\";\n                logGestureInfo('Touches Moved - Invalid number of Touches: ' + touches.length ? touches.length : 0 + ', state: ' + _state);\n            }\n            else {\n                var touch = touches[0];\n                var translation = touch.getMaxTranslation();\n                var distanceMoved = Math.sqrt(translation.x * translation.x + translation.y + translation.y);\n                if (touch.touchEndTime) {\n                    if(_state == \"Began\" || _state == \"Changed\") {\n                        _state = \"Ended\";\n                    } else {\n                        _state = \"Failed\";\n                    }\n                } else if ( distanceMoved < MIN_DISTANCE_FOR_BEGAN) {\n                    _state = \"Possible\";\n                } else if (_state == \"Possible\") {\n                    _state = \"Began\";\n                }\n                else {\n                    _state = \"Changed\";\n                    logGestureInfo('Touches Moved, current translation: ' + JSON.stringify(touch.getCurrentTranslation(), null));\n                }\n            }\n\n            if(this.callback) {\n                this.callback(this);\n            }\n        },\n        touchesEnded: function(touches) {\n            _state = \"Ended\";\n            logGestureInfo('Touches Ended and pan gesture is no longer active');\n\n            if(this.callback) {\n                this.callback(this);\n            }\n        },\n        getState: function () {\n            return _state;\n        }\n    };\n\n    var panGestureImpl = _.extend(new GestureRecognizerBase(), PanGestureRecognizerBase);\n    //panGestureImpl =  new PanGestureRecognizerProtocol(tapGestureImpl, true);\n    return panGestureImpl;\n}\n\nmodule.exports = PanGestureRecognizerFactory;\n",
    "var t = require('tcomb-validation');\nvar _ = require('underscore');\n\nvar GestureRecognizerBase = require('../GestureRecognizerBase');\nvar GestureRecognizerProtocol = require('../Protocols/GestureRecognizerProtocol');\n\nvar TapGestureRecognizerProtocol = GestureRecognizerProtocol.extend( new t.struct({\n    setNumberTapsRequired: t.func(t.Num, t.Nil, 'setNumberTapsRequired'),\n    getNumberOfTaps: t.func(t.Nil, t.Num, 'getNumberTaps')\n}, 'TapGestureRecognizerProtocol'));\n\n//TAP GESTURE IS DESCRETE EVENT... should we call callback Action with anything unless tap is successful??\nfunction TapGestureRecognizerFactory() {\n    var shouldLogGesture = false;\n    var logGestureContext = \"TapGesture (1 Tap) - \";\n    var logGestureInfo = function(logString) {\n        if(shouldLogGesture) {\n            console.log(logGestureContext + logString);\n        }\n    }\n\n    var _numTapsRequired = 1; //TODO: implement if/when needed\n    var _numberOfTouchesRequired = 1;\n    var _state = \"None\";\n\n    var MAX_DISTANCE = 5;//total pixels\n    var MAX_TAP_DURATION = 150;// milliseconds\n    var MAX_TIME_BETWEEN_TAPS = 350;\n\n    var _numberOfTaps = 0;\n    var _setTimeoutForTouchesBeganId = null;\n    var _setTimeoutForTouchesEndedId = null;\n\n    function restart() {\n        _state = \"None\";\n        _numberOfTaps = 0;\n        if(_setTimeoutForTouchesBeganId) {\n            clearTimeout(_setTimeoutForTouchesBeganId);\n        }\n        if(_setTimeoutForTouchesEndedId) {\n            clearTimeout(_setTimeoutForTouchesEndedId);\n        }\n        _setTimeoutForTouchesBeganId = null;\n        _setTimeoutForTouchesEndedId = null;\n    }\n\n    function isTouchValid(touch) {\n        var maxTranslation = touch.getMaxTranslation();\n        var distanceMoved = Math.sqrt(maxTranslation.x * maxTranslation.x + maxTranslation.y + maxTranslation.y);\n        var touchDuration = touch.getTouchDuration();\n        return distanceMoved <= MAX_DISTANCE && touchDuration <= MAX_TAP_DURATION;\n    }\n\n    var TapGestureRecognizer = {\n        setNumberTapsRequired: function(numTapsRequired) {\n            _numTapsRequired = numTapsRequired;\n            logGestureContext = 'TapGesture (' + _numTapsRequired + ' Taps) - ';\n            logGestureInfo(\"setNumberTapsRequired: \" + _numTapsRequired);\n        },\n        getNumberOfTaps: function() {\n            return _numberOfTaps;\n        },\n        logDebugInfo: function(shouldLog) {\n            shouldLogGesture = shouldLog;\n        },\n        reset: function() {\n            logGestureInfo(\"Tap Gesture Recognizer - reset\");\n            restart();\n        },\n        touchesBegan: function(touches) {\n            if(!this.isActive() && _state != \"None\") {\n                return;\n            }\n\n            if(_setTimeoutForTouchesBeganId && _state == \"Began\") { //When this happens we had correct number of touches but got one extra\n                _state = \"Failed\";\n                logGestureInfo(\"Touches Began - Too many taps. Number of taps required: \" + _numTapsRequired + \", state: \" + _state);\n                clearTimeout(_setTimeoutForTouchesBeganId);\n                _setTimeoutForTouchesBeganId = null;\n                this.stateFailedOrEnded();\n                return;\n            }\n\n            if(_setTimeoutForTouchesBeganId) { //We were waiting for another touch and we got it\n                clearTimeout(_setTimeoutForTouchesBeganId);\n                _setTimeoutForTouchesBeganId = null;\n            }\n\n            var totalTouches = this.getNumberOfTouches();\n            if(totalTouches != _numberOfTouchesRequired) {\n                _state = \"Failed\";\n                logGestureInfo(\"Touches Began - Number of touches invalid. Number of Touches required: \" + _numberOfTouchesRequired + \", actual: \" + totalTouches + \", state: \" + _state);\n            }\n            else {\n                _numberOfTaps++;\n                if (_numberOfTaps <= _numTapsRequired) {\n                    _state = \"Possible\";\n                    logGestureInfo(\"Touches Began - state: \" + _state);\n                    var that = this;\n                    _setTimeoutForTouchesBeganId = setTimeout(function(){\n                        _state = \"Failed\";\n                        logGestureInfo(\"Touches Began - Touch Lasted Too Long. state: \" + _state);\n                        that.stateFailedOrEnded();\n                    }, MAX_TAP_DURATION)\n                }\n                else if (_numberOfTaps > _numTapsRequired) {\n                    _state = \"Failed\";\n                    logGestureInfo(\"Touches Began - Too many taps: \" + _state);\n                }\n            }\n\n            if(!this.isActive()) {\n                this.stateFailedOrEnded();\n            }\n        },\n        touchesMoved: function(touches) {\n            if(this.isActive()) {\n                var totalTouches = this.getNumberOfTouches();\n                if(totalTouches != _numberOfTouchesRequired) {\n                    _state = \"Failed\";\n                    logGestureInfo(\"Touches Moved - Invalid Number of Touches. State: \" + _state);\n                }\n                else {\n                    var touchesValid = true;\n                    for(var i = 0; i < touches.length; i++) {\n                        if(!isTouchValid(touches[i])) {\n                            touchesValid = false;\n                            _state = \"Failed\";\n                            logGestureInfo(\"Touches Moved - Invalid Touch. State: \" + _state);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if(_state == \"Failed\") {\n                this.stateFailedOrEnded();\n            }\n        },\n        touchesEnded: function(touches) {\n            if(_setTimeoutForTouchesBeganId) {\n                clearTimeout(_setTimeoutForTouchesBeganId);\n                _setTimeoutForTouchesBeganId = null;\n            }\n\n            if(!this.isActive()) {\n                return;\n            }\n\n            var touchesValid = true;\n            for(var i = 0; i < touches.length; i++) {\n                if(!isTouchValid(touches[i])) {\n                    touchesValid = false;\n                    break;\n                }\n            }\n\n            var otherRecognizerFailed = true;\n            if(this.requiredGestureRecognizerToFail) {\n                var otherState = this.requiredGestureRecognizerToFail.getState();\n                logGestureInfo(\"Touches Ended - Other GestureRecognizer state: \" + otherState);\n                otherRecognizerFailed = otherState == \"Failed\" || otherState == \"None\";\n            }\n\n            if(!touchesValid) {\n                _state = \"Failed\";\n                logGestureInfo(\"Touches Ended - Invalid Touche(s). State: \" + _state);\n            }\n            else if(_numberOfTaps == _numTapsRequired && otherRecognizerFailed) {\n                _state = \"Began\";\n                logGestureInfo(\"Touches Ended - Valid Number of Taps... Make sure another tap doesn't come, State: \" + _state);\n                if(_setTimeoutForTouchesEndedId) {\n                    clearTimeout(_setTimeoutForTouchesEndedId);\n                    _setTimeoutForTouchesEndedId = null;\n                }\n\n                var that = this;\n                _setTimeoutForTouchesBeganId = setTimeout(function() {\n                    _setTimeoutForTouchesBeganId = null;\n                    if(_state == 'Began') {\n                        _state = 'Ended';\n                        if(that.callback && _state == \"Ended\") {\n                            logGestureInfo(\"Touches Ended - RECOGNIZED\");\n                            that.callback(that);\n                        }\n                        that.stateFailedOrEnded();\n                    }\n                }, MAX_TIME_BETWEEN_TAPS)\n\n            }\n            else if(_numberOfTaps == _numTapsRequired) {\n                if(_state != \"Failed\") {\n                    _state = \"Possible\";\n                    var that = this;\n\n                    logGestureInfo(\"Touches Ended - Other Recognizer Hasn't Failed, state: \" + _state);\n                    _setTimeoutForTouchesEndedId = setTimeout(function () {\n                        _setTimeoutForTouchesEndedId = null;\n                        var otherState = that.requiredGestureRecognizerToFail.getState();\n                        otherRecognizerFailed = otherState == \"Failed\" || otherState == \"None\";\n\n                        if(_numberOfTaps != _numTapsRequired) {\n                            logGestureInfo(\"Touches Ended - Other GestureRecognizer failed in time but too many taps. Needed: \" + _numTapsRequired + \", Had: \" + _numberOfTaps + \", State: \" + _state);\n                        }\n                        else if (otherRecognizerFailed) {\n                            logGestureInfo(\"Touches Ended - Other GestureRecognizer failed in time. Other Recognizer State:  \" + otherState);\n                            _state = \"Ended\";\n                        }\n                        else {\n                            logGestureInfo(\"Touches Ended - Other GestureRecognizer didn't fail in time. Other Recognizer State: \" + otherState);\n                            _state = \"Failed\";\n                        }\n\n                        if(that.callback && _state == \"Ended\") {\n                            that.callback(that);\n                        }\n                        that.stateFailedOrEnded();\n                    }, MAX_TIME_BETWEEN_TAPS + 50);\n                }\n            }\n            else if(_numberOfTaps < _numTapsRequired) {\n                _state = \"Possible\";\n                logGestureInfo(\"Touches Ended - Not enough taps Yet. Need: \" + _numTapsRequired + \", Have: \" + _numberOfTaps + \", State: \" + _state);\n                var that = this;\n                _setTimeoutForTouchesBeganId = setTimeout(function() {\n                    if(_state == \"Possible\") {\n                        _state = \"Failed\"; //Held touch too long\n                    }\n                    logGestureInfo(\"Touches Ended - Didn't get enough taps.  Needed: \" + _numTapsRequired + \", Had: \" + _numberOfTaps + \", State: \" + _state);\n                    that.stateFailedOrEnded();\n                }, MAX_TIME_BETWEEN_TAPS);\n\n            }\n            else {\n                _state = \"Failed\";\n            }\n\n            if(this.callback && _state == \"Ended\") {\n                logGestureInfo(\"Touches Ended - RECOGNIZED\");\n                this.callback(this);\n            }\n            if(!this.isActive()) {\n                this.stateFailedOrEnded();\n            }\n        },\n        getState: function () {\n            return _state;\n        }\n    };\n\n    var tapGestureImpl = _.extend(new GestureRecognizerBase(), TapGestureRecognizer);\n    return tapGestureImpl;\n}\n\nmodule.exports = TapGestureRecognizerFactory;\n",
    "var TouchProtocol = require('./Protocols/TouchProtocol');\n\nfunction touchFactory(identifier, touchLocation, target) {\n    var now = Date.now();\n    var touch = new TouchProtocol({\n        identifier: identifier.toString(),\n        target: target,\n        startLocation: touchLocation,\n        lastLocation: touchLocation,\n        touchStartTime: now,\n        touchLastMoveTime: now,\n        touchEndTime: null,\n        minX: touchLocation.x,\n        maxX: touchLocation.x,\n        minY: touchLocation.y,\n        maxY: touchLocation.y\n    }, true);//Mutable\n\n    return touch;\n}\nmodule.exports = touchFactory;\n"
  ]
}